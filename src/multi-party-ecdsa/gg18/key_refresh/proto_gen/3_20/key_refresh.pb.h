// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/key_refresh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5frefresh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5frefresh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-paillier/proto_gen/paillier.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gg18_2fkey_5frefresh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gg18_2fkey_5frefresh_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg18_2fkey_5frefresh_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_refresh {
class Round0BCMessage;
struct Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round1BCMessage;
struct Round1BCMessageDefaultTypeInternal;
extern Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
class Round1P2PMessage;
struct Round1P2PMessageDefaultTypeInternal;
extern Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
class Round2P2PMessage;
struct Round2P2PMessageDefaultTypeInternal;
extern Round2P2PMessageDefaultTypeInternal _Round2P2PMessage_default_instance_;
class Round3BCMessage;
struct Round3BCMessageDefaultTypeInternal;
extern Round3BCMessageDefaultTypeInternal _Round3BCMessage_default_instance_;
}  // namespace key_refresh
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_refresh {

// ===================================================================

class Round0BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  ~Round0BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round0BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round0BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round0BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round0BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVFieldNumber = 1,
  };
  // string V = 1;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round1BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage) */ {
 public:
  inline Round1BCMessage() : Round1BCMessage(nullptr) {}
  ~Round1BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round1BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round1BCMessage(const Round1BCMessage& from);
  Round1BCMessage(Round1BCMessage&& from) noexcept
    : Round1BCMessage() {
    *this = ::std::move(from);
  }

  inline Round1BCMessage& operator=(const Round1BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1BCMessage& operator=(Round1BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round1BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round1BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round1BCMessage*>(
               &_Round1BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round1BCMessage& a, Round1BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round1BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round1BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round1BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round1BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage";
  }
  protected:
  explicit Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVsFieldNumber = 1,
    kNTildeFieldNumber = 2,
    kH1FieldNumber = 3,
    kH2FieldNumber = 4,
    kBlindFactorFieldNumber = 8,
    kDlnProof1FieldNumber = 5,
    kDlnProof2FieldNumber = 6,
    kPailPubFieldNumber = 7,
  };
  // repeated .safeheron.proto.CurvePoint vs = 1;
  int vs_size() const;
  private:
  int _internal_vs_size() const;
  public:
  void clear_vs();
  ::safeheron::proto::CurvePoint* mutable_vs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_vs();
  private:
  const ::safeheron::proto::CurvePoint& _internal_vs(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_vs();
  public:
  const ::safeheron::proto::CurvePoint& vs(int index) const;
  ::safeheron::proto::CurvePoint* add_vs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      vs() const;

  // string N_tilde = 2;
  void clear_n_tilde();
  const std::string& n_tilde() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_n_tilde(ArgT0&& arg0, ArgT... args);
  std::string* mutable_n_tilde();
  PROTOBUF_NODISCARD std::string* release_n_tilde();
  void set_allocated_n_tilde(std::string* n_tilde);
  private:
  const std::string& _internal_n_tilde() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n_tilde(const std::string& value);
  std::string* _internal_mutable_n_tilde();
  public:

  // string h1 = 3;
  void clear_h1();
  const std::string& h1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_h1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_h1();
  PROTOBUF_NODISCARD std::string* release_h1();
  void set_allocated_h1(std::string* h1);
  private:
  const std::string& _internal_h1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h1(const std::string& value);
  std::string* _internal_mutable_h1();
  public:

  // string h2 = 4;
  void clear_h2();
  const std::string& h2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_h2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_h2();
  PROTOBUF_NODISCARD std::string* release_h2();
  void set_allocated_h2(std::string* h2);
  private:
  const std::string& _internal_h2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_h2(const std::string& value);
  std::string* _internal_mutable_h2();
  public:

  // string blind_factor = 8;
  void clear_blind_factor();
  const std::string& blind_factor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blind_factor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blind_factor();
  PROTOBUF_NODISCARD std::string* release_blind_factor();
  void set_allocated_blind_factor(std::string* blind_factor);
  private:
  const std::string& _internal_blind_factor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blind_factor(const std::string& value);
  std::string* _internal_mutable_blind_factor();
  public:

  // .safeheron.proto.DLNProof dln_proof_1 = 5;
  bool has_dln_proof_1() const;
  private:
  bool _internal_has_dln_proof_1() const;
  public:
  void clear_dln_proof_1();
  const ::safeheron::proto::DLNProof& dln_proof_1() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLNProof* release_dln_proof_1();
  ::safeheron::proto::DLNProof* mutable_dln_proof_1();
  void set_allocated_dln_proof_1(::safeheron::proto::DLNProof* dln_proof_1);
  private:
  const ::safeheron::proto::DLNProof& _internal_dln_proof_1() const;
  ::safeheron::proto::DLNProof* _internal_mutable_dln_proof_1();
  public:
  void unsafe_arena_set_allocated_dln_proof_1(
      ::safeheron::proto::DLNProof* dln_proof_1);
  ::safeheron::proto::DLNProof* unsafe_arena_release_dln_proof_1();

  // .safeheron.proto.DLNProof dln_proof_2 = 6;
  bool has_dln_proof_2() const;
  private:
  bool _internal_has_dln_proof_2() const;
  public:
  void clear_dln_proof_2();
  const ::safeheron::proto::DLNProof& dln_proof_2() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLNProof* release_dln_proof_2();
  ::safeheron::proto::DLNProof* mutable_dln_proof_2();
  void set_allocated_dln_proof_2(::safeheron::proto::DLNProof* dln_proof_2);
  private:
  const ::safeheron::proto::DLNProof& _internal_dln_proof_2() const;
  ::safeheron::proto::DLNProof* _internal_mutable_dln_proof_2();
  public:
  void unsafe_arena_set_allocated_dln_proof_2(
      ::safeheron::proto::DLNProof* dln_proof_2);
  ::safeheron::proto::DLNProof* unsafe_arena_release_dln_proof_2();

  // .safeheron.proto.PailPub pail_pub = 7;
  bool has_pail_pub() const;
  private:
  bool _internal_has_pail_pub() const;
  public:
  void clear_pail_pub();
  const ::safeheron::proto::PailPub& pail_pub() const;
  PROTOBUF_NODISCARD ::safeheron::proto::PailPub* release_pail_pub();
  ::safeheron::proto::PailPub* mutable_pail_pub();
  void set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub);
  private:
  const ::safeheron::proto::PailPub& _internal_pail_pub() const;
  ::safeheron::proto::PailPub* _internal_mutable_pail_pub();
  public:
  void unsafe_arena_set_allocated_pail_pub(
      ::safeheron::proto::PailPub* pail_pub);
  ::safeheron::proto::PailPub* unsafe_arena_release_pail_pub();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > vs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_tilde_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blind_factor_;
  ::safeheron::proto::DLNProof* dln_proof_1_;
  ::safeheron::proto::DLNProof* dln_proof_2_;
  ::safeheron::proto::PailPub* pail_pub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round1P2PMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage) */ {
 public:
  inline Round1P2PMessage() : Round1P2PMessage(nullptr) {}
  ~Round1P2PMessage() override;
  explicit PROTOBUF_CONSTEXPR Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round1P2PMessage(const Round1P2PMessage& from);
  Round1P2PMessage(Round1P2PMessage&& from) noexcept
    : Round1P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round1P2PMessage& operator=(const Round1P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1P2PMessage& operator=(Round1P2PMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round1P2PMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round1P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round1P2PMessage*>(
               &_Round1P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round1P2PMessage& a, Round1P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1P2PMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round1P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round1P2PMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round1P2PMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round1P2PMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1P2PMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage";
  }
  protected:
  explicit Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXIjFieldNumber = 8,
  };
  // string x_ij = 8;
  void clear_x_ij();
  const std::string& x_ij() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x_ij(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x_ij();
  PROTOBUF_NODISCARD std::string* release_x_ij();
  void set_allocated_x_ij(std::string* x_ij);
  private:
  const std::string& _internal_x_ij() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x_ij(const std::string& value);
  std::string* _internal_mutable_x_ij();
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_ij_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round2P2PMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage) */ {
 public:
  inline Round2P2PMessage() : Round2P2PMessage(nullptr) {}
  ~Round2P2PMessage() override;
  explicit PROTOBUF_CONSTEXPR Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round2P2PMessage(const Round2P2PMessage& from);
  Round2P2PMessage(Round2P2PMessage&& from) noexcept
    : Round2P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round2P2PMessage& operator=(const Round2P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2P2PMessage& operator=(Round2P2PMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round2P2PMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round2P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round2P2PMessage*>(
               &_Round2P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Round2P2PMessage& a, Round2P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2P2PMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round2P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round2P2PMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round2P2PMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round2P2PMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2P2PMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage";
  }
  protected:
  explicit Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDlogProofXFieldNumber = 1,
    kPailProofFieldNumber = 2,
    kNsfProofFieldNumber = 3,
  };
  // .safeheron.proto.DLogProof dlog_proof_x = 1;
  bool has_dlog_proof_x() const;
  private:
  bool _internal_has_dlog_proof_x() const;
  public:
  void clear_dlog_proof_x();
  const ::safeheron::proto::DLogProof& dlog_proof_x() const;
  PROTOBUF_NODISCARD ::safeheron::proto::DLogProof* release_dlog_proof_x();
  ::safeheron::proto::DLogProof* mutable_dlog_proof_x();
  void set_allocated_dlog_proof_x(::safeheron::proto::DLogProof* dlog_proof_x);
  private:
  const ::safeheron::proto::DLogProof& _internal_dlog_proof_x() const;
  ::safeheron::proto::DLogProof* _internal_mutable_dlog_proof_x();
  public:
  void unsafe_arena_set_allocated_dlog_proof_x(
      ::safeheron::proto::DLogProof* dlog_proof_x);
  ::safeheron::proto::DLogProof* unsafe_arena_release_dlog_proof_x();

  // .safeheron.proto.PailBlumModulusProof pail_proof = 2;
  bool has_pail_proof() const;
  private:
  bool _internal_has_pail_proof() const;
  public:
  void clear_pail_proof();
  const ::safeheron::proto::PailBlumModulusProof& pail_proof() const;
  PROTOBUF_NODISCARD ::safeheron::proto::PailBlumModulusProof* release_pail_proof();
  ::safeheron::proto::PailBlumModulusProof* mutable_pail_proof();
  void set_allocated_pail_proof(::safeheron::proto::PailBlumModulusProof* pail_proof);
  private:
  const ::safeheron::proto::PailBlumModulusProof& _internal_pail_proof() const;
  ::safeheron::proto::PailBlumModulusProof* _internal_mutable_pail_proof();
  public:
  void unsafe_arena_set_allocated_pail_proof(
      ::safeheron::proto::PailBlumModulusProof* pail_proof);
  ::safeheron::proto::PailBlumModulusProof* unsafe_arena_release_pail_proof();

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 3;
  bool has_nsf_proof() const;
  private:
  bool _internal_has_nsf_proof() const;
  public:
  void clear_nsf_proof();
  const ::safeheron::proto::NoSmallFactorProof& nsf_proof() const;
  PROTOBUF_NODISCARD ::safeheron::proto::NoSmallFactorProof* release_nsf_proof();
  ::safeheron::proto::NoSmallFactorProof* mutable_nsf_proof();
  void set_allocated_nsf_proof(::safeheron::proto::NoSmallFactorProof* nsf_proof);
  private:
  const ::safeheron::proto::NoSmallFactorProof& _internal_nsf_proof() const;
  ::safeheron::proto::NoSmallFactorProof* _internal_mutable_nsf_proof();
  public:
  void unsafe_arena_set_allocated_nsf_proof(
      ::safeheron::proto::NoSmallFactorProof* nsf_proof);
  ::safeheron::proto::NoSmallFactorProof* unsafe_arena_release_nsf_proof();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::safeheron::proto::DLogProof* dlog_proof_x_;
  ::safeheron::proto::PailBlumModulusProof* pail_proof_;
  ::safeheron::proto::NoSmallFactorProof* nsf_proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5frefresh_2eproto;
};
// -------------------------------------------------------------------

class Round3BCMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage) */ {
 public:
  inline Round3BCMessage() : Round3BCMessage(nullptr) {}
  ~Round3BCMessage() override;
  explicit PROTOBUF_CONSTEXPR Round3BCMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Round3BCMessage(const Round3BCMessage& from);
  Round3BCMessage(Round3BCMessage&& from) noexcept
    : Round3BCMessage() {
    *this = ::std::move(from);
  }

  inline Round3BCMessage& operator=(const Round3BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round3BCMessage& operator=(Round3BCMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Round3BCMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Round3BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round3BCMessage*>(
               &_Round3BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Round3BCMessage& a, Round3BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round3BCMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round3BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Round3BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Round3BCMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Round3BCMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Round3BCMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round3BCMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage";
  }
  protected:
  explicit Round3BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckStatusFieldNumber = 1,
  };
  // int32 ack_status = 1;
  void clear_ack_status();
  int32_t ack_status() const;
  void set_ack_status(int32_t value);
  private:
  int32_t _internal_ack_status() const;
  void _internal_set_ack_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t ack_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5frefresh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string V = 1;
inline void Round0BCMessage::clear_v() {
  v_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::v() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round0BCMessage::set_v(ArgT0&& arg0, ArgT... args) {
 
 v_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V)
}
inline std::string* Round0BCMessage::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V)
  return _s;
}
inline const std::string& Round0BCMessage::_internal_v() const {
  return v_.Get();
}
inline void Round0BCMessage::_internal_set_v(const std::string& value) {
  
  v_.Set(value, GetArenaForAllocation());
}
inline std::string* Round0BCMessage::_internal_mutable_v() {
  
  return v_.Mutable(GetArenaForAllocation());
}
inline std::string* Round0BCMessage::release_v() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V)
  return v_.Release();
}
inline void Round0BCMessage::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  v_.SetAllocated(v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (v_.IsDefault()) {
    v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V)
}

// -------------------------------------------------------------------

// Round1BCMessage

// repeated .safeheron.proto.CurvePoint vs = 1;
inline int Round1BCMessage::_internal_vs_size() const {
  return vs_.size();
}
inline int Round1BCMessage::vs_size() const {
  return _internal_vs_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_vs(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.vs)
  return vs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_vs() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.vs)
  return &vs_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_vs(int index) const {
  return vs_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::vs(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.vs)
  return _internal_vs(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_vs() {
  return vs_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_vs() {
  ::safeheron::proto::CurvePoint* _add = _internal_add_vs();
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.vs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::vs() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.vs)
  return vs_;
}

// string N_tilde = 2;
inline void Round1BCMessage::clear_n_tilde() {
  n_tilde_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::n_tilde() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde)
  return _internal_n_tilde();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_n_tilde(ArgT0&& arg0, ArgT... args) {
 
 n_tilde_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde)
}
inline std::string* Round1BCMessage::mutable_n_tilde() {
  std::string* _s = _internal_mutable_n_tilde();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_n_tilde() const {
  return n_tilde_.Get();
}
inline void Round1BCMessage::_internal_set_n_tilde(const std::string& value) {
  
  n_tilde_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_n_tilde() {
  
  return n_tilde_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_n_tilde() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde)
  return n_tilde_.Release();
}
inline void Round1BCMessage::set_allocated_n_tilde(std::string* n_tilde) {
  if (n_tilde != nullptr) {
    
  } else {
    
  }
  n_tilde_.SetAllocated(n_tilde, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (n_tilde_.IsDefault()) {
    n_tilde_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde)
}

// string h1 = 3;
inline void Round1BCMessage::clear_h1() {
  h1_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::h1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1)
  return _internal_h1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_h1(ArgT0&& arg0, ArgT... args) {
 
 h1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1)
}
inline std::string* Round1BCMessage::mutable_h1() {
  std::string* _s = _internal_mutable_h1();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_h1() const {
  return h1_.Get();
}
inline void Round1BCMessage::_internal_set_h1(const std::string& value) {
  
  h1_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_h1() {
  
  return h1_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_h1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1)
  return h1_.Release();
}
inline void Round1BCMessage::set_allocated_h1(std::string* h1) {
  if (h1 != nullptr) {
    
  } else {
    
  }
  h1_.SetAllocated(h1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (h1_.IsDefault()) {
    h1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1)
}

// string h2 = 4;
inline void Round1BCMessage::clear_h2() {
  h2_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::h2() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2)
  return _internal_h2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_h2(ArgT0&& arg0, ArgT... args) {
 
 h2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2)
}
inline std::string* Round1BCMessage::mutable_h2() {
  std::string* _s = _internal_mutable_h2();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_h2() const {
  return h2_.Get();
}
inline void Round1BCMessage::_internal_set_h2(const std::string& value) {
  
  h2_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_h2() {
  
  return h2_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_h2() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2)
  return h2_.Release();
}
inline void Round1BCMessage::set_allocated_h2(std::string* h2) {
  if (h2 != nullptr) {
    
  } else {
    
  }
  h2_.SetAllocated(h2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (h2_.IsDefault()) {
    h2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2)
}

// .safeheron.proto.DLNProof dln_proof_1 = 5;
inline bool Round1BCMessage::_internal_has_dln_proof_1() const {
  return this != internal_default_instance() && dln_proof_1_ != nullptr;
}
inline bool Round1BCMessage::has_dln_proof_1() const {
  return _internal_has_dln_proof_1();
}
inline const ::safeheron::proto::DLNProof& Round1BCMessage::_internal_dln_proof_1() const {
  const ::safeheron::proto::DLNProof* p = dln_proof_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLNProof&>(
      ::safeheron::proto::_DLNProof_default_instance_);
}
inline const ::safeheron::proto::DLNProof& Round1BCMessage::dln_proof_1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_1)
  return _internal_dln_proof_1();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_dln_proof_1(
    ::safeheron::proto::DLNProof* dln_proof_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_1_);
  }
  dln_proof_1_ = dln_proof_1;
  if (dln_proof_1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_1)
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::release_dln_proof_1() {
  
  ::safeheron::proto::DLNProof* temp = dln_proof_1_;
  dln_proof_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::unsafe_arena_release_dln_proof_1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_1)
  
  ::safeheron::proto::DLNProof* temp = dln_proof_1_;
  dln_proof_1_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::_internal_mutable_dln_proof_1() {
  
  if (dln_proof_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLNProof>(GetArenaForAllocation());
    dln_proof_1_ = p;
  }
  return dln_proof_1_;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::mutable_dln_proof_1() {
  ::safeheron::proto::DLNProof* _msg = _internal_mutable_dln_proof_1();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_1)
  return _msg;
}
inline void Round1BCMessage::set_allocated_dln_proof_1(::safeheron::proto::DLNProof* dln_proof_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_1_);
  }
  if (dln_proof_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_1));
    if (message_arena != submessage_arena) {
      dln_proof_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dln_proof_1, submessage_arena);
    }
    
  } else {
    
  }
  dln_proof_1_ = dln_proof_1;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_1)
}

// .safeheron.proto.DLNProof dln_proof_2 = 6;
inline bool Round1BCMessage::_internal_has_dln_proof_2() const {
  return this != internal_default_instance() && dln_proof_2_ != nullptr;
}
inline bool Round1BCMessage::has_dln_proof_2() const {
  return _internal_has_dln_proof_2();
}
inline const ::safeheron::proto::DLNProof& Round1BCMessage::_internal_dln_proof_2() const {
  const ::safeheron::proto::DLNProof* p = dln_proof_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLNProof&>(
      ::safeheron::proto::_DLNProof_default_instance_);
}
inline const ::safeheron::proto::DLNProof& Round1BCMessage::dln_proof_2() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_2)
  return _internal_dln_proof_2();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_dln_proof_2(
    ::safeheron::proto::DLNProof* dln_proof_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_2_);
  }
  dln_proof_2_ = dln_proof_2;
  if (dln_proof_2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_2)
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::release_dln_proof_2() {
  
  ::safeheron::proto::DLNProof* temp = dln_proof_2_;
  dln_proof_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::unsafe_arena_release_dln_proof_2() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_2)
  
  ::safeheron::proto::DLNProof* temp = dln_proof_2_;
  dln_proof_2_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::_internal_mutable_dln_proof_2() {
  
  if (dln_proof_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLNProof>(GetArenaForAllocation());
    dln_proof_2_ = p;
  }
  return dln_proof_2_;
}
inline ::safeheron::proto::DLNProof* Round1BCMessage::mutable_dln_proof_2() {
  ::safeheron::proto::DLNProof* _msg = _internal_mutable_dln_proof_2();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_2)
  return _msg;
}
inline void Round1BCMessage::set_allocated_dln_proof_2(::safeheron::proto::DLNProof* dln_proof_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_2_);
  }
  if (dln_proof_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof_2));
    if (message_arena != submessage_arena) {
      dln_proof_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dln_proof_2, submessage_arena);
    }
    
  } else {
    
  }
  dln_proof_2_ = dln_proof_2;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.dln_proof_2)
}

// .safeheron.proto.PailPub pail_pub = 7;
inline bool Round1BCMessage::_internal_has_pail_pub() const {
  return this != internal_default_instance() && pail_pub_ != nullptr;
}
inline bool Round1BCMessage::has_pail_pub() const {
  return _internal_has_pail_pub();
}
inline const ::safeheron::proto::PailPub& Round1BCMessage::_internal_pail_pub() const {
  const ::safeheron::proto::PailPub* p = pail_pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailPub&>(
      ::safeheron::proto::_PailPub_default_instance_);
}
inline const ::safeheron::proto::PailPub& Round1BCMessage::pail_pub() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.pail_pub)
  return _internal_pail_pub();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_pail_pub(
    ::safeheron::proto::PailPub* pail_pub) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  pail_pub_ = pail_pub;
  if (pail_pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.pail_pub)
}
inline ::safeheron::proto::PailPub* Round1BCMessage::release_pail_pub() {
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::PailPub* Round1BCMessage::unsafe_arena_release_pail_pub() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.pail_pub)
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailPub* Round1BCMessage::_internal_mutable_pail_pub() {
  
  if (pail_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailPub>(GetArenaForAllocation());
    pail_pub_ = p;
  }
  return pail_pub_;
}
inline ::safeheron::proto::PailPub* Round1BCMessage::mutable_pail_pub() {
  ::safeheron::proto::PailPub* _msg = _internal_mutable_pail_pub();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.pail_pub)
  return _msg;
}
inline void Round1BCMessage::set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  if (pail_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub));
    if (message_arena != submessage_arena) {
      pail_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_pub, submessage_arena);
    }
    
  } else {
    
  }
  pail_pub_ = pail_pub;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.pail_pub)
}

// string blind_factor = 8;
inline void Round1BCMessage::clear_blind_factor() {
  blind_factor_.ClearToEmpty();
}
inline const std::string& Round1BCMessage::blind_factor() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor)
  return _internal_blind_factor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1BCMessage::set_blind_factor(ArgT0&& arg0, ArgT... args) {
 
 blind_factor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor)
}
inline std::string* Round1BCMessage::mutable_blind_factor() {
  std::string* _s = _internal_mutable_blind_factor();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor)
  return _s;
}
inline const std::string& Round1BCMessage::_internal_blind_factor() const {
  return blind_factor_.Get();
}
inline void Round1BCMessage::_internal_set_blind_factor(const std::string& value) {
  
  blind_factor_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1BCMessage::_internal_mutable_blind_factor() {
  
  return blind_factor_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1BCMessage::release_blind_factor() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor)
  return blind_factor_.Release();
}
inline void Round1BCMessage::set_allocated_blind_factor(std::string* blind_factor) {
  if (blind_factor != nullptr) {
    
  } else {
    
  }
  blind_factor_.SetAllocated(blind_factor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blind_factor_.IsDefault()) {
    blind_factor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor)
}

// -------------------------------------------------------------------

// Round1P2PMessage

// string x_ij = 8;
inline void Round1P2PMessage::clear_x_ij() {
  x_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::x_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij)
  return _internal_x_ij();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Round1P2PMessage::set_x_ij(ArgT0&& arg0, ArgT... args) {
 
 x_ij_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij)
}
inline std::string* Round1P2PMessage::mutable_x_ij() {
  std::string* _s = _internal_mutable_x_ij();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij)
  return _s;
}
inline const std::string& Round1P2PMessage::_internal_x_ij() const {
  return x_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_x_ij(const std::string& value) {
  
  x_ij_.Set(value, GetArenaForAllocation());
}
inline std::string* Round1P2PMessage::_internal_mutable_x_ij() {
  
  return x_ij_.Mutable(GetArenaForAllocation());
}
inline std::string* Round1P2PMessage::release_x_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij)
  return x_ij_.Release();
}
inline void Round1P2PMessage::set_allocated_x_ij(std::string* x_ij) {
  if (x_ij != nullptr) {
    
  } else {
    
  }
  x_ij_.SetAllocated(x_ij, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (x_ij_.IsDefault()) {
    x_ij_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij)
}

// -------------------------------------------------------------------

// Round2P2PMessage

// .safeheron.proto.DLogProof dlog_proof_x = 1;
inline bool Round2P2PMessage::_internal_has_dlog_proof_x() const {
  return this != internal_default_instance() && dlog_proof_x_ != nullptr;
}
inline bool Round2P2PMessage::has_dlog_proof_x() const {
  return _internal_has_dlog_proof_x();
}
inline const ::safeheron::proto::DLogProof& Round2P2PMessage::_internal_dlog_proof_x() const {
  const ::safeheron::proto::DLogProof* p = dlog_proof_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof&>(
      ::safeheron::proto::_DLogProof_default_instance_);
}
inline const ::safeheron::proto::DLogProof& Round2P2PMessage::dlog_proof_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.dlog_proof_x)
  return _internal_dlog_proof_x();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_dlog_proof_x(
    ::safeheron::proto::DLogProof* dlog_proof_x) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x_);
  }
  dlog_proof_x_ = dlog_proof_x;
  if (dlog_proof_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.dlog_proof_x)
}
inline ::safeheron::proto::DLogProof* Round2P2PMessage::release_dlog_proof_x() {
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_x_;
  dlog_proof_x_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::DLogProof* Round2P2PMessage::unsafe_arena_release_dlog_proof_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.dlog_proof_x)
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_x_;
  dlog_proof_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof* Round2P2PMessage::_internal_mutable_dlog_proof_x() {
  
  if (dlog_proof_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof>(GetArenaForAllocation());
    dlog_proof_x_ = p;
  }
  return dlog_proof_x_;
}
inline ::safeheron::proto::DLogProof* Round2P2PMessage::mutable_dlog_proof_x() {
  ::safeheron::proto::DLogProof* _msg = _internal_mutable_dlog_proof_x();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.dlog_proof_x)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_dlog_proof_x(::safeheron::proto::DLogProof* dlog_proof_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x_);
  }
  if (dlog_proof_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x));
    if (message_arena != submessage_arena) {
      dlog_proof_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dlog_proof_x, submessage_arena);
    }
    
  } else {
    
  }
  dlog_proof_x_ = dlog_proof_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.dlog_proof_x)
}

// .safeheron.proto.PailBlumModulusProof pail_proof = 2;
inline bool Round2P2PMessage::_internal_has_pail_proof() const {
  return this != internal_default_instance() && pail_proof_ != nullptr;
}
inline bool Round2P2PMessage::has_pail_proof() const {
  return _internal_has_pail_proof();
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2P2PMessage::_internal_pail_proof() const {
  const ::safeheron::proto::PailBlumModulusProof* p = pail_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailBlumModulusProof&>(
      ::safeheron::proto::_PailBlumModulusProof_default_instance_);
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2P2PMessage::pail_proof() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.pail_proof)
  return _internal_pail_proof();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_pail_proof(
    ::safeheron::proto::PailBlumModulusProof* pail_proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof_);
  }
  pail_proof_ = pail_proof;
  if (pail_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.pail_proof)
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::release_pail_proof() {
  
  ::safeheron::proto::PailBlumModulusProof* temp = pail_proof_;
  pail_proof_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::unsafe_arena_release_pail_proof() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.pail_proof)
  
  ::safeheron::proto::PailBlumModulusProof* temp = pail_proof_;
  pail_proof_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::_internal_mutable_pail_proof() {
  
  if (pail_proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailBlumModulusProof>(GetArenaForAllocation());
    pail_proof_ = p;
  }
  return pail_proof_;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2P2PMessage::mutable_pail_proof() {
  ::safeheron::proto::PailBlumModulusProof* _msg = _internal_mutable_pail_proof();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.pail_proof)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_pail_proof(::safeheron::proto::PailBlumModulusProof* pail_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof_);
  }
  if (pail_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof));
    if (message_arena != submessage_arena) {
      pail_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_proof, submessage_arena);
    }
    
  } else {
    
  }
  pail_proof_ = pail_proof;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.pail_proof)
}

// .safeheron.proto.NoSmallFactorProof nsf_proof = 3;
inline bool Round2P2PMessage::_internal_has_nsf_proof() const {
  return this != internal_default_instance() && nsf_proof_ != nullptr;
}
inline bool Round2P2PMessage::has_nsf_proof() const {
  return _internal_has_nsf_proof();
}
inline const ::safeheron::proto::NoSmallFactorProof& Round2P2PMessage::_internal_nsf_proof() const {
  const ::safeheron::proto::NoSmallFactorProof* p = nsf_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::NoSmallFactorProof&>(
      ::safeheron::proto::_NoSmallFactorProof_default_instance_);
}
inline const ::safeheron::proto::NoSmallFactorProof& Round2P2PMessage::nsf_proof() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.nsf_proof)
  return _internal_nsf_proof();
}
inline void Round2P2PMessage::unsafe_arena_set_allocated_nsf_proof(
    ::safeheron::proto::NoSmallFactorProof* nsf_proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof_);
  }
  nsf_proof_ = nsf_proof;
  if (nsf_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.nsf_proof)
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::release_nsf_proof() {
  
  ::safeheron::proto::NoSmallFactorProof* temp = nsf_proof_;
  nsf_proof_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::unsafe_arena_release_nsf_proof() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.nsf_proof)
  
  ::safeheron::proto::NoSmallFactorProof* temp = nsf_proof_;
  nsf_proof_ = nullptr;
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::_internal_mutable_nsf_proof() {
  
  if (nsf_proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::NoSmallFactorProof>(GetArenaForAllocation());
    nsf_proof_ = p;
  }
  return nsf_proof_;
}
inline ::safeheron::proto::NoSmallFactorProof* Round2P2PMessage::mutable_nsf_proof() {
  ::safeheron::proto::NoSmallFactorProof* _msg = _internal_mutable_nsf_proof();
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.nsf_proof)
  return _msg;
}
inline void Round2P2PMessage::set_allocated_nsf_proof(::safeheron::proto::NoSmallFactorProof* nsf_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof_);
  }
  if (nsf_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof));
    if (message_arena != submessage_arena) {
      nsf_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nsf_proof, submessage_arena);
    }
    
  } else {
    
  }
  nsf_proof_ = nsf_proof;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage.nsf_proof)
}

// -------------------------------------------------------------------

// Round3BCMessage

// int32 ack_status = 1;
inline void Round3BCMessage::clear_ack_status() {
  ack_status_ = 0;
}
inline int32_t Round3BCMessage::_internal_ack_status() const {
  return ack_status_;
}
inline int32_t Round3BCMessage::ack_status() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage.ack_status)
  return _internal_ack_status();
}
inline void Round3BCMessage::_internal_set_ack_status(int32_t value) {
  
  ack_status_ = value;
}
inline void Round3BCMessage::set_ack_status(int32_t value) {
  _internal_set_ack_status(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage.ack_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace key_refresh
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5frefresh_2eproto
