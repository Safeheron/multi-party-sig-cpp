// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/key_refresh.proto

#include "key_refresh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_refresh {
PROTOBUF_CONSTEXPR Round0BCMessage::Round0BCMessage(
    ::_pbi::ConstantInitialized)
  : v_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round0BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round0BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round0BCMessageDefaultTypeInternal() {}
  union {
    Round0BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1BCMessage::Round1BCMessage(
    ::_pbi::ConstantInitialized)
  : vs_()
  , n_tilde_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , h1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , h2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , blind_factor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dln_proof_1_(nullptr)
  , dln_proof_2_(nullptr)
  , pail_pub_(nullptr){}
struct Round1BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1BCMessageDefaultTypeInternal() {}
  union {
    Round1BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
PROTOBUF_CONSTEXPR Round1P2PMessage::Round1P2PMessage(
    ::_pbi::ConstantInitialized)
  : x_ij_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Round1P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round1P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round1P2PMessageDefaultTypeInternal() {}
  union {
    Round1P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round2P2PMessage::Round2P2PMessage(
    ::_pbi::ConstantInitialized)
  : dlog_proof_x_(nullptr)
  , pail_proof_(nullptr)
  , nsf_proof_(nullptr){}
struct Round2P2PMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round2P2PMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round2P2PMessageDefaultTypeInternal() {}
  union {
    Round2P2PMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round2P2PMessageDefaultTypeInternal _Round2P2PMessage_default_instance_;
PROTOBUF_CONSTEXPR Round3BCMessage::Round3BCMessage(
    ::_pbi::ConstantInitialized)
  : ack_status_(0){}
struct Round3BCMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Round3BCMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Round3BCMessageDefaultTypeInternal() {}
  union {
    Round3BCMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Round3BCMessageDefaultTypeInternal _Round3BCMessage_default_instance_;
}  // namespace key_refresh
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_gg18_2fkey_5frefresh_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gg18_2fkey_5frefresh_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gg18_2fkey_5frefresh_2eproto = nullptr;

const uint32_t TableStruct_gg18_2fkey_5frefresh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, vs_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, n_tilde_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, h1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, h2_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, dln_proof_1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, dln_proof_2_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, pail_pub_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage, blind_factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage, x_ij_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage, dlog_proof_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage, pail_proof_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage, nsf_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage, ack_status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage)},
  { 7, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage)},
  { 21, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage)},
  { 28, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage)},
  { 37, -1, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::_Round0BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::_Round1BCMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::_Round1P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::_Round2P2PMessage_default_instance_._instance,
  &::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::_Round3BCMessage_default_instance_._instance,
};

const char descriptor_table_protodef_gg18_2fkey_5frefresh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026gg18/key_refresh.proto\0222safeheron.prot"
  "o.multi_party_ecdsa.gg18.key_refresh\032\021cu"
  "rve_point.proto\032\016paillier.proto\032\tzkp.pro"
  "to\"\034\n\017Round0BCMessage\022\t\n\001V\030\001 \001(\t\"\205\002\n\017Rou"
  "nd1BCMessage\022\'\n\002vs\030\001 \003(\0132\033.safeheron.pro"
  "to.CurvePoint\022\017\n\007N_tilde\030\002 \001(\t\022\n\n\002h1\030\003 \001"
  "(\t\022\n\n\002h2\030\004 \001(\t\022.\n\013dln_proof_1\030\005 \001(\0132\031.sa"
  "feheron.proto.DLNProof\022.\n\013dln_proof_2\030\006 "
  "\001(\0132\031.safeheron.proto.DLNProof\022*\n\010pail_p"
  "ub\030\007 \001(\0132\030.safeheron.proto.PailPub\022\024\n\014bl"
  "ind_factor\030\010 \001(\t\" \n\020Round1P2PMessage\022\014\n\004"
  "x_ij\030\010 \001(\t\"\267\001\n\020Round2P2PMessage\0220\n\014dlog_"
  "proof_x\030\001 \001(\0132\032.safeheron.proto.DLogProo"
  "f\0229\n\npail_proof\030\002 \001(\0132%.safeheron.proto."
  "PailBlumModulusProof\0226\n\tnsf_proof\030\003 \001(\0132"
  "#.safeheron.proto.NoSmallFactorProof\"%\n\017"
  "Round3BCMessage\022\022\n\nack_status\030\001 \001(\005b\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gg18_2fkey_5frefresh_2eproto_deps[3] = {
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_paillier_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::_pbi::once_flag descriptor_table_gg18_2fkey_5frefresh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gg18_2fkey_5frefresh_2eproto = {
    false, false, 683, descriptor_table_protodef_gg18_2fkey_5frefresh_2eproto,
    "gg18/key_refresh.proto",
    &descriptor_table_gg18_2fkey_5frefresh_2eproto_once, descriptor_table_gg18_2fkey_5frefresh_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_gg18_2fkey_5frefresh_2eproto::offsets,
    file_level_metadata_gg18_2fkey_5frefresh_2eproto, file_level_enum_descriptors_gg18_2fkey_5frefresh_2eproto,
    file_level_service_descriptors_gg18_2fkey_5frefresh_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gg18_2fkey_5frefresh_2eproto_getter() {
  return &descriptor_table_gg18_2fkey_5frefresh_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gg18_2fkey_5frefresh_2eproto(&descriptor_table_gg18_2fkey_5frefresh_2eproto);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_refresh {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
};

Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    v_.Set(from._internal_v(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
}

inline void Round0BCMessage::SharedCtor() {
v_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  v_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  v_.Destroy();
}

void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string V = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round0BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string V = 1;
  if (!this->_internal_v().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v().data(), static_cast<int>(this->_internal_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage.V");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string V = 1;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round0BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round0BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round0BCMessage::GetClassData() const { return &_class_data_; }

void Round0BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round0BCMessage *>(to)->MergeFrom(
      static_cast<const Round0BCMessage &>(from));
}


void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v().empty()) {
    _internal_set_v(from._internal_v());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &v_, lhs_arena,
      &other->v_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fkey_5frefresh_2eproto_getter, &descriptor_table_gg18_2fkey_5frefresh_2eproto_once,
      file_level_metadata_gg18_2fkey_5frefresh_2eproto[0]);
}

// ===================================================================

class Round1BCMessage::_Internal {
 public:
  static const ::safeheron::proto::DLNProof& dln_proof_1(const Round1BCMessage* msg);
  static const ::safeheron::proto::DLNProof& dln_proof_2(const Round1BCMessage* msg);
  static const ::safeheron::proto::PailPub& pail_pub(const Round1BCMessage* msg);
};

const ::safeheron::proto::DLNProof&
Round1BCMessage::_Internal::dln_proof_1(const Round1BCMessage* msg) {
  return *msg->dln_proof_1_;
}
const ::safeheron::proto::DLNProof&
Round1BCMessage::_Internal::dln_proof_2(const Round1BCMessage* msg) {
  return *msg->dln_proof_2_;
}
const ::safeheron::proto::PailPub&
Round1BCMessage::_Internal::pail_pub(const Round1BCMessage* msg) {
  return *msg->pail_pub_;
}
void Round1BCMessage::clear_vs() {
  vs_.Clear();
}
void Round1BCMessage::clear_dln_proof_1() {
  if (GetArenaForAllocation() == nullptr && dln_proof_1_ != nullptr) {
    delete dln_proof_1_;
  }
  dln_proof_1_ = nullptr;
}
void Round1BCMessage::clear_dln_proof_2() {
  if (GetArenaForAllocation() == nullptr && dln_proof_2_ != nullptr) {
    delete dln_proof_2_;
  }
  dln_proof_2_ = nullptr;
}
void Round1BCMessage::clear_pail_pub() {
  if (GetArenaForAllocation() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
}
Round1BCMessage::Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
}
Round1BCMessage::Round1BCMessage(const Round1BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vs_(from.vs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_tilde_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    n_tilde_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_n_tilde().empty()) {
    n_tilde_.Set(from._internal_n_tilde(), 
      GetArenaForAllocation());
  }
  h1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    h1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h1().empty()) {
    h1_.Set(from._internal_h1(), 
      GetArenaForAllocation());
  }
  h2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    h2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_h2().empty()) {
    h2_.Set(from._internal_h2(), 
      GetArenaForAllocation());
  }
  blind_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blind_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blind_factor().empty()) {
    blind_factor_.Set(from._internal_blind_factor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dln_proof_1()) {
    dln_proof_1_ = new ::safeheron::proto::DLNProof(*from.dln_proof_1_);
  } else {
    dln_proof_1_ = nullptr;
  }
  if (from._internal_has_dln_proof_2()) {
    dln_proof_2_ = new ::safeheron::proto::DLNProof(*from.dln_proof_2_);
  } else {
    dln_proof_2_ = nullptr;
  }
  if (from._internal_has_pail_pub()) {
    pail_pub_ = new ::safeheron::proto::PailPub(*from.pail_pub_);
  } else {
    pail_pub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
}

inline void Round1BCMessage::SharedCtor() {
n_tilde_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  n_tilde_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
h1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  h1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
h2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  h2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blind_factor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blind_factor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dln_proof_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pail_pub_) -
    reinterpret_cast<char*>(&dln_proof_1_)) + sizeof(pail_pub_));
}

Round1BCMessage::~Round1BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  n_tilde_.Destroy();
  h1_.Destroy();
  h2_.Destroy();
  blind_factor_.Destroy();
  if (this != internal_default_instance()) delete dln_proof_1_;
  if (this != internal_default_instance()) delete dln_proof_2_;
  if (this != internal_default_instance()) delete pail_pub_;
}

void Round1BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vs_.Clear();
  n_tilde_.ClearToEmpty();
  h1_.ClearToEmpty();
  h2_.ClearToEmpty();
  blind_factor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && dln_proof_1_ != nullptr) {
    delete dln_proof_1_;
  }
  dln_proof_1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dln_proof_2_ != nullptr) {
    delete dln_proof_2_;
  }
  dln_proof_2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .safeheron.proto.CurvePoint vs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string N_tilde = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_n_tilde();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde"));
        } else
          goto handle_unusual;
        continue;
      // string h1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_h1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1"));
        } else
          goto handle_unusual;
        continue;
      // string h2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_h2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2"));
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.DLNProof dln_proof_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dln_proof_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.DLNProof dln_proof_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dln_proof_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailPub pail_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_pub(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string blind_factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_blind_factor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .safeheron.proto.CurvePoint vs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vs_size()); i < n; i++) {
    const auto& repfield = this->_internal_vs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string N_tilde = 2;
  if (!this->_internal_n_tilde().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n_tilde().data(), static_cast<int>(this->_internal_n_tilde().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.N_tilde");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_n_tilde(), target);
  }

  // string h1 = 3;
  if (!this->_internal_h1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h1().data(), static_cast<int>(this->_internal_h1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_h1(), target);
  }

  // string h2 = 4;
  if (!this->_internal_h2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h2().data(), static_cast<int>(this->_internal_h2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.h2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_h2(), target);
  }

  // .safeheron.proto.DLNProof dln_proof_1 = 5;
  if (this->_internal_has_dln_proof_1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dln_proof_1(this),
        _Internal::dln_proof_1(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.DLNProof dln_proof_2 = 6;
  if (this->_internal_has_dln_proof_2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dln_proof_2(this),
        _Internal::dln_proof_2(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailPub pail_pub = 7;
  if (this->_internal_has_pail_pub()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::pail_pub(this),
        _Internal::pail_pub(this).GetCachedSize(), target, stream);
  }

  // string blind_factor = 8;
  if (!this->_internal_blind_factor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blind_factor().data(), static_cast<int>(this->_internal_blind_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage.blind_factor");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_blind_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  return target;
}

size_t Round1BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.CurvePoint vs = 1;
  total_size += 1UL * this->_internal_vs_size();
  for (const auto& msg : this->vs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string N_tilde = 2;
  if (!this->_internal_n_tilde().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n_tilde());
  }

  // string h1 = 3;
  if (!this->_internal_h1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h1());
  }

  // string h2 = 4;
  if (!this->_internal_h2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h2());
  }

  // string blind_factor = 8;
  if (!this->_internal_blind_factor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blind_factor());
  }

  // .safeheron.proto.DLNProof dln_proof_1 = 5;
  if (this->_internal_has_dln_proof_1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dln_proof_1_);
  }

  // .safeheron.proto.DLNProof dln_proof_2 = 6;
  if (this->_internal_has_dln_proof_2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dln_proof_2_);
  }

  // .safeheron.proto.PailPub pail_pub = 7;
  if (this->_internal_has_pail_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_pub_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1BCMessage::GetClassData() const { return &_class_data_; }

void Round1BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1BCMessage *>(to)->MergeFrom(
      static_cast<const Round1BCMessage &>(from));
}


void Round1BCMessage::MergeFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vs_.MergeFrom(from.vs_);
  if (!from._internal_n_tilde().empty()) {
    _internal_set_n_tilde(from._internal_n_tilde());
  }
  if (!from._internal_h1().empty()) {
    _internal_set_h1(from._internal_h1());
  }
  if (!from._internal_h2().empty()) {
    _internal_set_h2(from._internal_h2());
  }
  if (!from._internal_blind_factor().empty()) {
    _internal_set_blind_factor(from._internal_blind_factor());
  }
  if (from._internal_has_dln_proof_1()) {
    _internal_mutable_dln_proof_1()->::safeheron::proto::DLNProof::MergeFrom(from._internal_dln_proof_1());
  }
  if (from._internal_has_dln_proof_2()) {
    _internal_mutable_dln_proof_2()->::safeheron::proto::DLNProof::MergeFrom(from._internal_dln_proof_2());
  }
  if (from._internal_has_pail_pub()) {
    _internal_mutable_pail_pub()->::safeheron::proto::PailPub::MergeFrom(from._internal_pail_pub());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1BCMessage::CopyFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1BCMessage::IsInitialized() const {
  return true;
}

void Round1BCMessage::InternalSwap(Round1BCMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vs_.InternalSwap(&other->vs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &n_tilde_, lhs_arena,
      &other->n_tilde_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &h1_, lhs_arena,
      &other->h1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &h2_, lhs_arena,
      &other->h2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blind_factor_, lhs_arena,
      &other->blind_factor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round1BCMessage, pail_pub_)
      + sizeof(Round1BCMessage::pail_pub_)
      - PROTOBUF_FIELD_OFFSET(Round1BCMessage, dln_proof_1_)>(
          reinterpret_cast<char*>(&dln_proof_1_),
          reinterpret_cast<char*>(&other->dln_proof_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fkey_5frefresh_2eproto_getter, &descriptor_table_gg18_2fkey_5frefresh_2eproto_once,
      file_level_metadata_gg18_2fkey_5frefresh_2eproto[1]);
}

// ===================================================================

class Round1P2PMessage::_Internal {
 public:
};

Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_ij_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    x_ij_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x_ij().empty()) {
    x_ij_.Set(from._internal_x_ij(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
}

inline void Round1P2PMessage::SharedCtor() {
x_ij_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  x_ij_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  x_ij_.Destroy();
}

void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_ij_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string x_ij = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_x_ij();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round1P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string x_ij = 8;
  if (!this->_internal_x_ij().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_ij().data(), static_cast<int>(this->_internal_x_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage.x_ij");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x_ij(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string x_ij = 8;
  if (!this->_internal_x_ij().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_ij());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round1P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round1P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round1P2PMessage::GetClassData() const { return &_class_data_; }

void Round1P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round1P2PMessage *>(to)->MergeFrom(
      static_cast<const Round1P2PMessage &>(from));
}


void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x_ij().empty()) {
    _internal_set_x_ij(from._internal_x_ij());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &x_ij_, lhs_arena,
      &other->x_ij_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fkey_5frefresh_2eproto_getter, &descriptor_table_gg18_2fkey_5frefresh_2eproto_once,
      file_level_metadata_gg18_2fkey_5frefresh_2eproto[2]);
}

// ===================================================================

class Round2P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::DLogProof& dlog_proof_x(const Round2P2PMessage* msg);
  static const ::safeheron::proto::PailBlumModulusProof& pail_proof(const Round2P2PMessage* msg);
  static const ::safeheron::proto::NoSmallFactorProof& nsf_proof(const Round2P2PMessage* msg);
};

const ::safeheron::proto::DLogProof&
Round2P2PMessage::_Internal::dlog_proof_x(const Round2P2PMessage* msg) {
  return *msg->dlog_proof_x_;
}
const ::safeheron::proto::PailBlumModulusProof&
Round2P2PMessage::_Internal::pail_proof(const Round2P2PMessage* msg) {
  return *msg->pail_proof_;
}
const ::safeheron::proto::NoSmallFactorProof&
Round2P2PMessage::_Internal::nsf_proof(const Round2P2PMessage* msg) {
  return *msg->nsf_proof_;
}
void Round2P2PMessage::clear_dlog_proof_x() {
  if (GetArenaForAllocation() == nullptr && dlog_proof_x_ != nullptr) {
    delete dlog_proof_x_;
  }
  dlog_proof_x_ = nullptr;
}
void Round2P2PMessage::clear_pail_proof() {
  if (GetArenaForAllocation() == nullptr && pail_proof_ != nullptr) {
    delete pail_proof_;
  }
  pail_proof_ = nullptr;
}
void Round2P2PMessage::clear_nsf_proof() {
  if (GetArenaForAllocation() == nullptr && nsf_proof_ != nullptr) {
    delete nsf_proof_;
  }
  nsf_proof_ = nullptr;
}
Round2P2PMessage::Round2P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
}
Round2P2PMessage::Round2P2PMessage(const Round2P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dlog_proof_x()) {
    dlog_proof_x_ = new ::safeheron::proto::DLogProof(*from.dlog_proof_x_);
  } else {
    dlog_proof_x_ = nullptr;
  }
  if (from._internal_has_pail_proof()) {
    pail_proof_ = new ::safeheron::proto::PailBlumModulusProof(*from.pail_proof_);
  } else {
    pail_proof_ = nullptr;
  }
  if (from._internal_has_nsf_proof()) {
    nsf_proof_ = new ::safeheron::proto::NoSmallFactorProof(*from.nsf_proof_);
  } else {
    nsf_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
}

inline void Round2P2PMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dlog_proof_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nsf_proof_) -
    reinterpret_cast<char*>(&dlog_proof_x_)) + sizeof(nsf_proof_));
}

Round2P2PMessage::~Round2P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round2P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dlog_proof_x_;
  if (this != internal_default_instance()) delete pail_proof_;
  if (this != internal_default_instance()) delete nsf_proof_;
}

void Round2P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round2P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && dlog_proof_x_ != nullptr) {
    delete dlog_proof_x_;
  }
  dlog_proof_x_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pail_proof_ != nullptr) {
    delete pail_proof_;
  }
  pail_proof_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nsf_proof_ != nullptr) {
    delete nsf_proof_;
  }
  nsf_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2P2PMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .safeheron.proto.DLogProof dlog_proof_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlog_proof_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.PailBlumModulusProof pail_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .safeheron.proto.NoSmallFactorProof nsf_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nsf_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round2P2PMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.DLogProof dlog_proof_x = 1;
  if (this->_internal_has_dlog_proof_x()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dlog_proof_x(this),
        _Internal::dlog_proof_x(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.PailBlumModulusProof pail_proof = 2;
  if (this->_internal_has_pail_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pail_proof(this),
        _Internal::pail_proof(this).GetCachedSize(), target, stream);
  }

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 3;
  if (this->_internal_has_nsf_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nsf_proof(this),
        _Internal::nsf_proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  return target;
}

size_t Round2P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.DLogProof dlog_proof_x = 1;
  if (this->_internal_has_dlog_proof_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dlog_proof_x_);
  }

  // .safeheron.proto.PailBlumModulusProof pail_proof = 2;
  if (this->_internal_has_pail_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_proof_);
  }

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 3;
  if (this->_internal_has_nsf_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nsf_proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round2P2PMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round2P2PMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round2P2PMessage::GetClassData() const { return &_class_data_; }

void Round2P2PMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round2P2PMessage *>(to)->MergeFrom(
      static_cast<const Round2P2PMessage &>(from));
}


void Round2P2PMessage::MergeFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dlog_proof_x()) {
    _internal_mutable_dlog_proof_x()->::safeheron::proto::DLogProof::MergeFrom(from._internal_dlog_proof_x());
  }
  if (from._internal_has_pail_proof()) {
    _internal_mutable_pail_proof()->::safeheron::proto::PailBlumModulusProof::MergeFrom(from._internal_pail_proof());
  }
  if (from._internal_has_nsf_proof()) {
    _internal_mutable_nsf_proof()->::safeheron::proto::NoSmallFactorProof::MergeFrom(from._internal_nsf_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round2P2PMessage::CopyFrom(const Round2P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round2P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2P2PMessage::IsInitialized() const {
  return true;
}

void Round2P2PMessage::InternalSwap(Round2P2PMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2P2PMessage, nsf_proof_)
      + sizeof(Round2P2PMessage::nsf_proof_)
      - PROTOBUF_FIELD_OFFSET(Round2P2PMessage, dlog_proof_x_)>(
          reinterpret_cast<char*>(&dlog_proof_x_),
          reinterpret_cast<char*>(&other->dlog_proof_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2P2PMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fkey_5frefresh_2eproto_getter, &descriptor_table_gg18_2fkey_5frefresh_2eproto_once,
      file_level_metadata_gg18_2fkey_5frefresh_2eproto[3]);
}

// ===================================================================

class Round3BCMessage::_Internal {
 public:
};

Round3BCMessage::Round3BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
}
Round3BCMessage::Round3BCMessage(const Round3BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ack_status_ = from.ack_status_;
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
}

inline void Round3BCMessage::SharedCtor() {
ack_status_ = 0;
}

Round3BCMessage::~Round3BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Round3BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Round3BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Round3BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round3BCMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ack_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ack_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Round3BCMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ack_status = 1;
  if (this->_internal_ack_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ack_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  return target;
}

size_t Round3BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ack_status = 1;
  if (this->_internal_ack_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ack_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Round3BCMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Round3BCMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Round3BCMessage::GetClassData() const { return &_class_data_; }

void Round3BCMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Round3BCMessage *>(to)->MergeFrom(
      static_cast<const Round3BCMessage &>(from));
}


void Round3BCMessage::MergeFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ack_status() != 0) {
    _internal_set_ack_status(from._internal_ack_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Round3BCMessage::CopyFrom(const Round3BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_refresh.Round3BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round3BCMessage::IsInitialized() const {
  return true;
}

void Round3BCMessage::InternalSwap(Round3BCMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ack_status_, other->ack_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round3BCMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gg18_2fkey_5frefresh_2eproto_getter, &descriptor_table_gg18_2fkey_5frefresh_2eproto_once,
      file_level_metadata_gg18_2fkey_5frefresh_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace key_refresh
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round2P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage*
Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_refresh::Round3BCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
