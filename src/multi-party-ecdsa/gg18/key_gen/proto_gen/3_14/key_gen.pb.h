// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/key_gen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5fgen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5fgen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "crypto-commitment/proto_gen/commitment.pb.switch.h"
#include "crypto-curve/proto_gen/curve_point.pb.switch.h"
#include "crypto-paillier/proto_gen/paillier.pb.switch.h"
#include "crypto-zkp/proto_gen/zkp.pb.switch.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gg18_2fkey_5fgen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gg18_2fkey_5fgen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg18_2fkey_5fgen_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_gen {
class Round0BCMessage;
class Round0BCMessageDefaultTypeInternal;
extern Round0BCMessageDefaultTypeInternal _Round0BCMessage_default_instance_;
class Round1BCMessage;
class Round1BCMessageDefaultTypeInternal;
extern Round1BCMessageDefaultTypeInternal _Round1BCMessage_default_instance_;
class Round1P2PMessage;
class Round1P2PMessageDefaultTypeInternal;
extern Round1P2PMessageDefaultTypeInternal _Round1P2PMessage_default_instance_;
class Round2BCMessage;
class Round2BCMessageDefaultTypeInternal;
extern Round2BCMessageDefaultTypeInternal _Round2BCMessage_default_instance_;
}  // namespace key_gen
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage>(Arena*);
template<> ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage* Arena::CreateMaybeMessage<::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_gen {

// ===================================================================

class Round0BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage) */ {
 public:
  inline Round0BCMessage() : Round0BCMessage(nullptr) {}
  virtual ~Round0BCMessage();

  Round0BCMessage(const Round0BCMessage& from);
  Round0BCMessage(Round0BCMessage&& from) noexcept
    : Round0BCMessage() {
    *this = ::std::move(from);
  }

  inline Round0BCMessage& operator=(const Round0BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round0BCMessage& operator=(Round0BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round0BCMessage& default_instance();

  static inline const Round0BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round0BCMessage*>(
               &_Round0BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Round0BCMessage& a, Round0BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round0BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round0BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round0BCMessage* New() const final {
    return CreateMaybeMessage<Round0BCMessage>(nullptr);
  }

  Round0BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round0BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round0BCMessage& from);
  void MergeFrom(const Round0BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round0BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage";
  }
  protected:
  explicit Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gg18_2fkey_5fgen_2eproto);
    return ::descriptor_table_gg18_2fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kKgcYFieldNumber = 3,
    kNTildeFieldNumber = 7,
    kH1FieldNumber = 8,
    kH2FieldNumber = 9,
    kPailPubFieldNumber = 4,
    kDlnProof1FieldNumber = 5,
    kDlnProof2FieldNumber = 6,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string kgc_Y = 3;
  void clear_kgc_y();
  const std::string& kgc_y() const;
  void set_kgc_y(const std::string& value);
  void set_kgc_y(std::string&& value);
  void set_kgc_y(const char* value);
  void set_kgc_y(const char* value, size_t size);
  std::string* mutable_kgc_y();
  std::string* release_kgc_y();
  void set_allocated_kgc_y(std::string* kgc_y);
  private:
  const std::string& _internal_kgc_y() const;
  void _internal_set_kgc_y(const std::string& value);
  std::string* _internal_mutable_kgc_y();
  public:

  // string N_tilde = 7;
  void clear_n_tilde();
  const std::string& n_tilde() const;
  void set_n_tilde(const std::string& value);
  void set_n_tilde(std::string&& value);
  void set_n_tilde(const char* value);
  void set_n_tilde(const char* value, size_t size);
  std::string* mutable_n_tilde();
  std::string* release_n_tilde();
  void set_allocated_n_tilde(std::string* n_tilde);
  private:
  const std::string& _internal_n_tilde() const;
  void _internal_set_n_tilde(const std::string& value);
  std::string* _internal_mutable_n_tilde();
  public:

  // string h1 = 8;
  void clear_h1();
  const std::string& h1() const;
  void set_h1(const std::string& value);
  void set_h1(std::string&& value);
  void set_h1(const char* value);
  void set_h1(const char* value, size_t size);
  std::string* mutable_h1();
  std::string* release_h1();
  void set_allocated_h1(std::string* h1);
  private:
  const std::string& _internal_h1() const;
  void _internal_set_h1(const std::string& value);
  std::string* _internal_mutable_h1();
  public:

  // string h2 = 9;
  void clear_h2();
  const std::string& h2() const;
  void set_h2(const std::string& value);
  void set_h2(std::string&& value);
  void set_h2(const char* value);
  void set_h2(const char* value, size_t size);
  std::string* mutable_h2();
  std::string* release_h2();
  void set_allocated_h2(std::string* h2);
  private:
  const std::string& _internal_h2() const;
  void _internal_set_h2(const std::string& value);
  std::string* _internal_mutable_h2();
  public:

  // .safeheron.proto.PailPub pail_pub = 4;
  bool has_pail_pub() const;
  private:
  bool _internal_has_pail_pub() const;
  public:
  void clear_pail_pub();
  const ::safeheron::proto::PailPub& pail_pub() const;
  ::safeheron::proto::PailPub* release_pail_pub();
  ::safeheron::proto::PailPub* mutable_pail_pub();
  void set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub);
  private:
  const ::safeheron::proto::PailPub& _internal_pail_pub() const;
  ::safeheron::proto::PailPub* _internal_mutable_pail_pub();
  public:
  void unsafe_arena_set_allocated_pail_pub(
      ::safeheron::proto::PailPub* pail_pub);
  ::safeheron::proto::PailPub* unsafe_arena_release_pail_pub();

  // .safeheron.proto.DLNProof dln_proof1 = 5;
  bool has_dln_proof1() const;
  private:
  bool _internal_has_dln_proof1() const;
  public:
  void clear_dln_proof1();
  const ::safeheron::proto::DLNProof& dln_proof1() const;
  ::safeheron::proto::DLNProof* release_dln_proof1();
  ::safeheron::proto::DLNProof* mutable_dln_proof1();
  void set_allocated_dln_proof1(::safeheron::proto::DLNProof* dln_proof1);
  private:
  const ::safeheron::proto::DLNProof& _internal_dln_proof1() const;
  ::safeheron::proto::DLNProof* _internal_mutable_dln_proof1();
  public:
  void unsafe_arena_set_allocated_dln_proof1(
      ::safeheron::proto::DLNProof* dln_proof1);
  ::safeheron::proto::DLNProof* unsafe_arena_release_dln_proof1();

  // .safeheron.proto.DLNProof dln_proof2 = 6;
  bool has_dln_proof2() const;
  private:
  bool _internal_has_dln_proof2() const;
  public:
  void clear_dln_proof2();
  const ::safeheron::proto::DLNProof& dln_proof2() const;
  ::safeheron::proto::DLNProof* release_dln_proof2();
  ::safeheron::proto::DLNProof* mutable_dln_proof2();
  void set_allocated_dln_proof2(::safeheron::proto::DLNProof* dln_proof2);
  private:
  const ::safeheron::proto::DLNProof& _internal_dln_proof2() const;
  ::safeheron::proto::DLNProof* _internal_mutable_dln_proof2();
  public:
  void unsafe_arena_set_allocated_dln_proof2(
      ::safeheron::proto::DLNProof* dln_proof2);
  ::safeheron::proto::DLNProof* unsafe_arena_release_dln_proof2();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kgc_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_tilde_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h2_;
  ::safeheron::proto::PailPub* pail_pub_;
  ::safeheron::proto::DLNProof* dln_proof1_;
  ::safeheron::proto::DLNProof* dln_proof2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round1BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage) */ {
 public:
  inline Round1BCMessage() : Round1BCMessage(nullptr) {}
  virtual ~Round1BCMessage();

  Round1BCMessage(const Round1BCMessage& from);
  Round1BCMessage(Round1BCMessage&& from) noexcept
    : Round1BCMessage() {
    *this = ::std::move(from);
  }

  inline Round1BCMessage& operator=(const Round1BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1BCMessage& operator=(Round1BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1BCMessage& default_instance();

  static inline const Round1BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round1BCMessage*>(
               &_Round1BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Round1BCMessage& a, Round1BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1BCMessage* New() const final {
    return CreateMaybeMessage<Round1BCMessage>(nullptr);
  }

  Round1BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1BCMessage& from);
  void MergeFrom(const Round1BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage";
  }
  protected:
  explicit Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gg18_2fkey_5fgen_2eproto);
    return ::descriptor_table_gg18_2fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVsFieldNumber = 4,
    kKgdYFieldNumber = 2,
  };
  // repeated .safeheron.proto.CurvePoint vs = 4;
  int vs_size() const;
  private:
  int _internal_vs_size() const;
  public:
  void clear_vs();
  ::safeheron::proto::CurvePoint* mutable_vs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
      mutable_vs();
  private:
  const ::safeheron::proto::CurvePoint& _internal_vs(int index) const;
  ::safeheron::proto::CurvePoint* _internal_add_vs();
  public:
  const ::safeheron::proto::CurvePoint& vs(int index) const;
  ::safeheron::proto::CurvePoint* add_vs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
      vs() const;

  // .safeheron.proto.KGD kgd_y = 2;
  bool has_kgd_y() const;
  private:
  bool _internal_has_kgd_y() const;
  public:
  void clear_kgd_y();
  const ::safeheron::proto::KGD& kgd_y() const;
  ::safeheron::proto::KGD* release_kgd_y();
  ::safeheron::proto::KGD* mutable_kgd_y();
  void set_allocated_kgd_y(::safeheron::proto::KGD* kgd_y);
  private:
  const ::safeheron::proto::KGD& _internal_kgd_y() const;
  ::safeheron::proto::KGD* _internal_mutable_kgd_y();
  public:
  void unsafe_arena_set_allocated_kgd_y(
      ::safeheron::proto::KGD* kgd_y);
  ::safeheron::proto::KGD* unsafe_arena_release_kgd_y();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint > vs_;
  ::safeheron::proto::KGD* kgd_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round1P2PMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage) */ {
 public:
  inline Round1P2PMessage() : Round1P2PMessage(nullptr) {}
  virtual ~Round1P2PMessage();

  Round1P2PMessage(const Round1P2PMessage& from);
  Round1P2PMessage(Round1P2PMessage&& from) noexcept
    : Round1P2PMessage() {
    *this = ::std::move(from);
  }

  inline Round1P2PMessage& operator=(const Round1P2PMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round1P2PMessage& operator=(Round1P2PMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round1P2PMessage& default_instance();

  static inline const Round1P2PMessage* internal_default_instance() {
    return reinterpret_cast<const Round1P2PMessage*>(
               &_Round1P2PMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Round1P2PMessage& a, Round1P2PMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round1P2PMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round1P2PMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round1P2PMessage* New() const final {
    return CreateMaybeMessage<Round1P2PMessage>(nullptr);
  }

  Round1P2PMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round1P2PMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round1P2PMessage& from);
  void MergeFrom(const Round1P2PMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round1P2PMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage";
  }
  protected:
  explicit Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gg18_2fkey_5fgen_2eproto);
    return ::descriptor_table_gg18_2fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXIjFieldNumber = 3,
    kNsfProofFieldNumber = 4,
  };
  // string x_ij = 3;
  void clear_x_ij();
  const std::string& x_ij() const;
  void set_x_ij(const std::string& value);
  void set_x_ij(std::string&& value);
  void set_x_ij(const char* value);
  void set_x_ij(const char* value, size_t size);
  std::string* mutable_x_ij();
  std::string* release_x_ij();
  void set_allocated_x_ij(std::string* x_ij);
  private:
  const std::string& _internal_x_ij() const;
  void _internal_set_x_ij(const std::string& value);
  std::string* _internal_mutable_x_ij();
  public:

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 4;
  bool has_nsf_proof() const;
  private:
  bool _internal_has_nsf_proof() const;
  public:
  void clear_nsf_proof();
  const ::safeheron::proto::NoSmallFactorProof& nsf_proof() const;
  ::safeheron::proto::NoSmallFactorProof* release_nsf_proof();
  ::safeheron::proto::NoSmallFactorProof* mutable_nsf_proof();
  void set_allocated_nsf_proof(::safeheron::proto::NoSmallFactorProof* nsf_proof);
  private:
  const ::safeheron::proto::NoSmallFactorProof& _internal_nsf_proof() const;
  ::safeheron::proto::NoSmallFactorProof* _internal_mutable_nsf_proof();
  public:
  void unsafe_arena_set_allocated_nsf_proof(
      ::safeheron::proto::NoSmallFactorProof* nsf_proof);
  ::safeheron::proto::NoSmallFactorProof* unsafe_arena_release_nsf_proof();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_ij_;
  ::safeheron::proto::NoSmallFactorProof* nsf_proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5fgen_2eproto;
};
// -------------------------------------------------------------------

class Round2BCMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage) */ {
 public:
  inline Round2BCMessage() : Round2BCMessage(nullptr) {}
  virtual ~Round2BCMessage();

  Round2BCMessage(const Round2BCMessage& from);
  Round2BCMessage(Round2BCMessage&& from) noexcept
    : Round2BCMessage() {
    *this = ::std::move(from);
  }

  inline Round2BCMessage& operator=(const Round2BCMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Round2BCMessage& operator=(Round2BCMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Round2BCMessage& default_instance();

  static inline const Round2BCMessage* internal_default_instance() {
    return reinterpret_cast<const Round2BCMessage*>(
               &_Round2BCMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Round2BCMessage& a, Round2BCMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Round2BCMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Round2BCMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Round2BCMessage* New() const final {
    return CreateMaybeMessage<Round2BCMessage>(nullptr);
  }

  Round2BCMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Round2BCMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Round2BCMessage& from);
  void MergeFrom(const Round2BCMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Round2BCMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage";
  }
  protected:
  explicit Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gg18_2fkey_5fgen_2eproto);
    return ::descriptor_table_gg18_2fkey_5fgen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubFieldNumber = 1,
    kDlogProofXFieldNumber = 2,
    kPailProofFieldNumber = 3,
  };
  // .safeheron.proto.CurvePoint pub = 1;
  bool has_pub() const;
  private:
  bool _internal_has_pub() const;
  public:
  void clear_pub();
  const ::safeheron::proto::CurvePoint& pub() const;
  ::safeheron::proto::CurvePoint* release_pub();
  ::safeheron::proto::CurvePoint* mutable_pub();
  void set_allocated_pub(::safeheron::proto::CurvePoint* pub);
  private:
  const ::safeheron::proto::CurvePoint& _internal_pub() const;
  ::safeheron::proto::CurvePoint* _internal_mutable_pub();
  public:
  void unsafe_arena_set_allocated_pub(
      ::safeheron::proto::CurvePoint* pub);
  ::safeheron::proto::CurvePoint* unsafe_arena_release_pub();

  // .safeheron.proto.DLogProof dlog_proof_x = 2;
  bool has_dlog_proof_x() const;
  private:
  bool _internal_has_dlog_proof_x() const;
  public:
  void clear_dlog_proof_x();
  const ::safeheron::proto::DLogProof& dlog_proof_x() const;
  ::safeheron::proto::DLogProof* release_dlog_proof_x();
  ::safeheron::proto::DLogProof* mutable_dlog_proof_x();
  void set_allocated_dlog_proof_x(::safeheron::proto::DLogProof* dlog_proof_x);
  private:
  const ::safeheron::proto::DLogProof& _internal_dlog_proof_x() const;
  ::safeheron::proto::DLogProof* _internal_mutable_dlog_proof_x();
  public:
  void unsafe_arena_set_allocated_dlog_proof_x(
      ::safeheron::proto::DLogProof* dlog_proof_x);
  ::safeheron::proto::DLogProof* unsafe_arena_release_dlog_proof_x();

  // .safeheron.proto.PailBlumModulusProof pail_proof = 3;
  bool has_pail_proof() const;
  private:
  bool _internal_has_pail_proof() const;
  public:
  void clear_pail_proof();
  const ::safeheron::proto::PailBlumModulusProof& pail_proof() const;
  ::safeheron::proto::PailBlumModulusProof* release_pail_proof();
  ::safeheron::proto::PailBlumModulusProof* mutable_pail_proof();
  void set_allocated_pail_proof(::safeheron::proto::PailBlumModulusProof* pail_proof);
  private:
  const ::safeheron::proto::PailBlumModulusProof& _internal_pail_proof() const;
  ::safeheron::proto::PailBlumModulusProof* _internal_mutable_pail_proof();
  public:
  void unsafe_arena_set_allocated_pail_proof(
      ::safeheron::proto::PailBlumModulusProof* pail_proof);
  ::safeheron::proto::PailBlumModulusProof* unsafe_arena_release_pail_proof();

  // @@protoc_insertion_point(class_scope:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::safeheron::proto::CurvePoint* pub_;
  ::safeheron::proto::DLogProof* dlog_proof_x_;
  ::safeheron::proto::PailBlumModulusProof* pail_proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gg18_2fkey_5fgen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Round0BCMessage

// string index = 1;
inline void Round0BCMessage::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::index() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
  return _internal_index();
}
inline void Round0BCMessage::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::mutable_index() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
  return _internal_mutable_index();
}
inline const std::string& Round0BCMessage::_internal_index() const {
  return index_.Get();
}
inline void Round0BCMessage::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_index(std::string&& value) {
  
  index_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
}
inline void Round0BCMessage::set_index(const char* value,
    size_t size) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
}
inline std::string* Round0BCMessage::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_index() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index)
}

// string kgc_Y = 3;
inline void Round0BCMessage::clear_kgc_y() {
  kgc_y_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::kgc_y() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
  return _internal_kgc_y();
}
inline void Round0BCMessage::set_kgc_y(const std::string& value) {
  _internal_set_kgc_y(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
}
inline std::string* Round0BCMessage::mutable_kgc_y() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
  return _internal_mutable_kgc_y();
}
inline const std::string& Round0BCMessage::_internal_kgc_y() const {
  return kgc_y_.Get();
}
inline void Round0BCMessage::_internal_set_kgc_y(const std::string& value) {
  
  kgc_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_kgc_y(std::string&& value) {
  
  kgc_y_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
}
inline void Round0BCMessage::set_kgc_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kgc_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
}
inline void Round0BCMessage::set_kgc_y(const char* value,
    size_t size) {
  
  kgc_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
}
inline std::string* Round0BCMessage::_internal_mutable_kgc_y() {
  
  return kgc_y_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_kgc_y() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
  return kgc_y_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_kgc_y(std::string* kgc_y) {
  if (kgc_y != nullptr) {
    
  } else {
    
  }
  kgc_y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kgc_y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y)
}

// .safeheron.proto.PailPub pail_pub = 4;
inline bool Round0BCMessage::_internal_has_pail_pub() const {
  return this != internal_default_instance() && pail_pub_ != nullptr;
}
inline bool Round0BCMessage::has_pail_pub() const {
  return _internal_has_pail_pub();
}
inline const ::safeheron::proto::PailPub& Round0BCMessage::_internal_pail_pub() const {
  const ::safeheron::proto::PailPub* p = pail_pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailPub&>(
      ::safeheron::proto::_PailPub_default_instance_);
}
inline const ::safeheron::proto::PailPub& Round0BCMessage::pail_pub() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.pail_pub)
  return _internal_pail_pub();
}
inline void Round0BCMessage::unsafe_arena_set_allocated_pail_pub(
    ::safeheron::proto::PailPub* pail_pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  pail_pub_ = pail_pub;
  if (pail_pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.pail_pub)
}
inline ::safeheron::proto::PailPub* Round0BCMessage::release_pail_pub() {
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailPub* Round0BCMessage::unsafe_arena_release_pail_pub() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.pail_pub)
  
  ::safeheron::proto::PailPub* temp = pail_pub_;
  pail_pub_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailPub* Round0BCMessage::_internal_mutable_pail_pub() {
  
  if (pail_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailPub>(GetArena());
    pail_pub_ = p;
  }
  return pail_pub_;
}
inline ::safeheron::proto::PailPub* Round0BCMessage::mutable_pail_pub() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.pail_pub)
  return _internal_mutable_pail_pub();
}
inline void Round0BCMessage::set_allocated_pail_pub(::safeheron::proto::PailPub* pail_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub_);
  }
  if (pail_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_pub)->GetArena();
    if (message_arena != submessage_arena) {
      pail_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_pub, submessage_arena);
    }
    
  } else {
    
  }
  pail_pub_ = pail_pub;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.pail_pub)
}

// .safeheron.proto.DLNProof dln_proof1 = 5;
inline bool Round0BCMessage::_internal_has_dln_proof1() const {
  return this != internal_default_instance() && dln_proof1_ != nullptr;
}
inline bool Round0BCMessage::has_dln_proof1() const {
  return _internal_has_dln_proof1();
}
inline const ::safeheron::proto::DLNProof& Round0BCMessage::_internal_dln_proof1() const {
  const ::safeheron::proto::DLNProof* p = dln_proof1_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLNProof&>(
      ::safeheron::proto::_DLNProof_default_instance_);
}
inline const ::safeheron::proto::DLNProof& Round0BCMessage::dln_proof1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof1)
  return _internal_dln_proof1();
}
inline void Round0BCMessage::unsafe_arena_set_allocated_dln_proof1(
    ::safeheron::proto::DLNProof* dln_proof1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof1_);
  }
  dln_proof1_ = dln_proof1;
  if (dln_proof1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof1)
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::release_dln_proof1() {
  
  ::safeheron::proto::DLNProof* temp = dln_proof1_;
  dln_proof1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::unsafe_arena_release_dln_proof1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof1)
  
  ::safeheron::proto::DLNProof* temp = dln_proof1_;
  dln_proof1_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::_internal_mutable_dln_proof1() {
  
  if (dln_proof1_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLNProof>(GetArena());
    dln_proof1_ = p;
  }
  return dln_proof1_;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::mutable_dln_proof1() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof1)
  return _internal_mutable_dln_proof1();
}
inline void Round0BCMessage::set_allocated_dln_proof1(::safeheron::proto::DLNProof* dln_proof1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof1_);
  }
  if (dln_proof1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof1)->GetArena();
    if (message_arena != submessage_arena) {
      dln_proof1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dln_proof1, submessage_arena);
    }
    
  } else {
    
  }
  dln_proof1_ = dln_proof1;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof1)
}

// .safeheron.proto.DLNProof dln_proof2 = 6;
inline bool Round0BCMessage::_internal_has_dln_proof2() const {
  return this != internal_default_instance() && dln_proof2_ != nullptr;
}
inline bool Round0BCMessage::has_dln_proof2() const {
  return _internal_has_dln_proof2();
}
inline const ::safeheron::proto::DLNProof& Round0BCMessage::_internal_dln_proof2() const {
  const ::safeheron::proto::DLNProof* p = dln_proof2_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLNProof&>(
      ::safeheron::proto::_DLNProof_default_instance_);
}
inline const ::safeheron::proto::DLNProof& Round0BCMessage::dln_proof2() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof2)
  return _internal_dln_proof2();
}
inline void Round0BCMessage::unsafe_arena_set_allocated_dln_proof2(
    ::safeheron::proto::DLNProof* dln_proof2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof2_);
  }
  dln_proof2_ = dln_proof2;
  if (dln_proof2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof2)
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::release_dln_proof2() {
  
  ::safeheron::proto::DLNProof* temp = dln_proof2_;
  dln_proof2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::unsafe_arena_release_dln_proof2() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof2)
  
  ::safeheron::proto::DLNProof* temp = dln_proof2_;
  dln_proof2_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::_internal_mutable_dln_proof2() {
  
  if (dln_proof2_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLNProof>(GetArena());
    dln_proof2_ = p;
  }
  return dln_proof2_;
}
inline ::safeheron::proto::DLNProof* Round0BCMessage::mutable_dln_proof2() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof2)
  return _internal_mutable_dln_proof2();
}
inline void Round0BCMessage::set_allocated_dln_proof2(::safeheron::proto::DLNProof* dln_proof2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof2_);
  }
  if (dln_proof2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dln_proof2)->GetArena();
    if (message_arena != submessage_arena) {
      dln_proof2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dln_proof2, submessage_arena);
    }
    
  } else {
    
  }
  dln_proof2_ = dln_proof2;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.dln_proof2)
}

// string N_tilde = 7;
inline void Round0BCMessage::clear_n_tilde() {
  n_tilde_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::n_tilde() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
  return _internal_n_tilde();
}
inline void Round0BCMessage::set_n_tilde(const std::string& value) {
  _internal_set_n_tilde(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
}
inline std::string* Round0BCMessage::mutable_n_tilde() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
  return _internal_mutable_n_tilde();
}
inline const std::string& Round0BCMessage::_internal_n_tilde() const {
  return n_tilde_.Get();
}
inline void Round0BCMessage::_internal_set_n_tilde(const std::string& value) {
  
  n_tilde_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_n_tilde(std::string&& value) {
  
  n_tilde_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
}
inline void Round0BCMessage::set_n_tilde(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_tilde_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
}
inline void Round0BCMessage::set_n_tilde(const char* value,
    size_t size) {
  
  n_tilde_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
}
inline std::string* Round0BCMessage::_internal_mutable_n_tilde() {
  
  return n_tilde_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_n_tilde() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
  return n_tilde_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_n_tilde(std::string* n_tilde) {
  if (n_tilde != nullptr) {
    
  } else {
    
  }
  n_tilde_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), n_tilde,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde)
}

// string h1 = 8;
inline void Round0BCMessage::clear_h1() {
  h1_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::h1() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
  return _internal_h1();
}
inline void Round0BCMessage::set_h1(const std::string& value) {
  _internal_set_h1(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
}
inline std::string* Round0BCMessage::mutable_h1() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
  return _internal_mutable_h1();
}
inline const std::string& Round0BCMessage::_internal_h1() const {
  return h1_.Get();
}
inline void Round0BCMessage::_internal_set_h1(const std::string& value) {
  
  h1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_h1(std::string&& value) {
  
  h1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
}
inline void Round0BCMessage::set_h1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  h1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
}
inline void Round0BCMessage::set_h1(const char* value,
    size_t size) {
  
  h1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
}
inline std::string* Round0BCMessage::_internal_mutable_h1() {
  
  return h1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_h1() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
  return h1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_h1(std::string* h1) {
  if (h1 != nullptr) {
    
  } else {
    
  }
  h1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), h1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1)
}

// string h2 = 9;
inline void Round0BCMessage::clear_h2() {
  h2_.ClearToEmpty();
}
inline const std::string& Round0BCMessage::h2() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
  return _internal_h2();
}
inline void Round0BCMessage::set_h2(const std::string& value) {
  _internal_set_h2(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
}
inline std::string* Round0BCMessage::mutable_h2() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
  return _internal_mutable_h2();
}
inline const std::string& Round0BCMessage::_internal_h2() const {
  return h2_.Get();
}
inline void Round0BCMessage::_internal_set_h2(const std::string& value) {
  
  h2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round0BCMessage::set_h2(std::string&& value) {
  
  h2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
}
inline void Round0BCMessage::set_h2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  h2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
}
inline void Round0BCMessage::set_h2(const char* value,
    size_t size) {
  
  h2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
}
inline std::string* Round0BCMessage::_internal_mutable_h2() {
  
  return h2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round0BCMessage::release_h2() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
  return h2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round0BCMessage::set_allocated_h2(std::string* h2) {
  if (h2 != nullptr) {
    
  } else {
    
  }
  h2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), h2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2)
}

// -------------------------------------------------------------------

// Round1BCMessage

// .safeheron.proto.KGD kgd_y = 2;
inline bool Round1BCMessage::_internal_has_kgd_y() const {
  return this != internal_default_instance() && kgd_y_ != nullptr;
}
inline bool Round1BCMessage::has_kgd_y() const {
  return _internal_has_kgd_y();
}
inline const ::safeheron::proto::KGD& Round1BCMessage::_internal_kgd_y() const {
  const ::safeheron::proto::KGD* p = kgd_y_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::KGD&>(
      ::safeheron::proto::_KGD_default_instance_);
}
inline const ::safeheron::proto::KGD& Round1BCMessage::kgd_y() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.kgd_y)
  return _internal_kgd_y();
}
inline void Round1BCMessage::unsafe_arena_set_allocated_kgd_y(
    ::safeheron::proto::KGD* kgd_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kgd_y_);
  }
  kgd_y_ = kgd_y;
  if (kgd_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.kgd_y)
}
inline ::safeheron::proto::KGD* Round1BCMessage::release_kgd_y() {
  
  ::safeheron::proto::KGD* temp = kgd_y_;
  kgd_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::KGD* Round1BCMessage::unsafe_arena_release_kgd_y() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.kgd_y)
  
  ::safeheron::proto::KGD* temp = kgd_y_;
  kgd_y_ = nullptr;
  return temp;
}
inline ::safeheron::proto::KGD* Round1BCMessage::_internal_mutable_kgd_y() {
  
  if (kgd_y_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::KGD>(GetArena());
    kgd_y_ = p;
  }
  return kgd_y_;
}
inline ::safeheron::proto::KGD* Round1BCMessage::mutable_kgd_y() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.kgd_y)
  return _internal_mutable_kgd_y();
}
inline void Round1BCMessage::set_allocated_kgd_y(::safeheron::proto::KGD* kgd_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(kgd_y_);
  }
  if (kgd_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kgd_y)->GetArena();
    if (message_arena != submessage_arena) {
      kgd_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kgd_y, submessage_arena);
    }
    
  } else {
    
  }
  kgd_y_ = kgd_y;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.kgd_y)
}

// repeated .safeheron.proto.CurvePoint vs = 4;
inline int Round1BCMessage::_internal_vs_size() const {
  return vs_.size();
}
inline int Round1BCMessage::vs_size() const {
  return _internal_vs_size();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::mutable_vs(int index) {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.vs)
  return vs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >*
Round1BCMessage::mutable_vs() {
  // @@protoc_insertion_point(field_mutable_list:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.vs)
  return &vs_;
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::_internal_vs(int index) const {
  return vs_.Get(index);
}
inline const ::safeheron::proto::CurvePoint& Round1BCMessage::vs(int index) const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.vs)
  return _internal_vs(index);
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::_internal_add_vs() {
  return vs_.Add();
}
inline ::safeheron::proto::CurvePoint* Round1BCMessage::add_vs() {
  // @@protoc_insertion_point(field_add:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.vs)
  return _internal_add_vs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safeheron::proto::CurvePoint >&
Round1BCMessage::vs() const {
  // @@protoc_insertion_point(field_list:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage.vs)
  return vs_;
}

// -------------------------------------------------------------------

// Round1P2PMessage

// string x_ij = 3;
inline void Round1P2PMessage::clear_x_ij() {
  x_ij_.ClearToEmpty();
}
inline const std::string& Round1P2PMessage::x_ij() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
  return _internal_x_ij();
}
inline void Round1P2PMessage::set_x_ij(const std::string& value) {
  _internal_set_x_ij(value);
  // @@protoc_insertion_point(field_set:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
}
inline std::string* Round1P2PMessage::mutable_x_ij() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
  return _internal_mutable_x_ij();
}
inline const std::string& Round1P2PMessage::_internal_x_ij() const {
  return x_ij_.Get();
}
inline void Round1P2PMessage::_internal_set_x_ij(const std::string& value) {
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Round1P2PMessage::set_x_ij(std::string&& value) {
  
  x_ij_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
}
inline void Round1P2PMessage::set_x_ij(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
}
inline void Round1P2PMessage::set_x_ij(const char* value,
    size_t size) {
  
  x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
}
inline std::string* Round1P2PMessage::_internal_mutable_x_ij() {
  
  return x_ij_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Round1P2PMessage::release_x_ij() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
  return x_ij_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Round1P2PMessage::set_allocated_x_ij(std::string* x_ij) {
  if (x_ij != nullptr) {
    
  } else {
    
  }
  x_ij_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_ij,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij)
}

// .safeheron.proto.NoSmallFactorProof nsf_proof = 4;
inline bool Round1P2PMessage::_internal_has_nsf_proof() const {
  return this != internal_default_instance() && nsf_proof_ != nullptr;
}
inline bool Round1P2PMessage::has_nsf_proof() const {
  return _internal_has_nsf_proof();
}
inline const ::safeheron::proto::NoSmallFactorProof& Round1P2PMessage::_internal_nsf_proof() const {
  const ::safeheron::proto::NoSmallFactorProof* p = nsf_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::NoSmallFactorProof&>(
      ::safeheron::proto::_NoSmallFactorProof_default_instance_);
}
inline const ::safeheron::proto::NoSmallFactorProof& Round1P2PMessage::nsf_proof() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.nsf_proof)
  return _internal_nsf_proof();
}
inline void Round1P2PMessage::unsafe_arena_set_allocated_nsf_proof(
    ::safeheron::proto::NoSmallFactorProof* nsf_proof) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof_);
  }
  nsf_proof_ = nsf_proof;
  if (nsf_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.nsf_proof)
}
inline ::safeheron::proto::NoSmallFactorProof* Round1P2PMessage::release_nsf_proof() {
  
  ::safeheron::proto::NoSmallFactorProof* temp = nsf_proof_;
  nsf_proof_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round1P2PMessage::unsafe_arena_release_nsf_proof() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.nsf_proof)
  
  ::safeheron::proto::NoSmallFactorProof* temp = nsf_proof_;
  nsf_proof_ = nullptr;
  return temp;
}
inline ::safeheron::proto::NoSmallFactorProof* Round1P2PMessage::_internal_mutable_nsf_proof() {
  
  if (nsf_proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::NoSmallFactorProof>(GetArena());
    nsf_proof_ = p;
  }
  return nsf_proof_;
}
inline ::safeheron::proto::NoSmallFactorProof* Round1P2PMessage::mutable_nsf_proof() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.nsf_proof)
  return _internal_mutable_nsf_proof();
}
inline void Round1P2PMessage::set_allocated_nsf_proof(::safeheron::proto::NoSmallFactorProof* nsf_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof_);
  }
  if (nsf_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsf_proof)->GetArena();
    if (message_arena != submessage_arena) {
      nsf_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nsf_proof, submessage_arena);
    }
    
  } else {
    
  }
  nsf_proof_ = nsf_proof;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.nsf_proof)
}

// -------------------------------------------------------------------

// Round2BCMessage

// .safeheron.proto.CurvePoint pub = 1;
inline bool Round2BCMessage::_internal_has_pub() const {
  return this != internal_default_instance() && pub_ != nullptr;
}
inline bool Round2BCMessage::has_pub() const {
  return _internal_has_pub();
}
inline const ::safeheron::proto::CurvePoint& Round2BCMessage::_internal_pub() const {
  const ::safeheron::proto::CurvePoint* p = pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::CurvePoint&>(
      ::safeheron::proto::_CurvePoint_default_instance_);
}
inline const ::safeheron::proto::CurvePoint& Round2BCMessage::pub() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pub)
  return _internal_pub();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_pub(
    ::safeheron::proto::CurvePoint* pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  pub_ = pub;
  if (pub) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pub)
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::release_pub() {
  
  ::safeheron::proto::CurvePoint* temp = pub_;
  pub_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::unsafe_arena_release_pub() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pub)
  
  ::safeheron::proto::CurvePoint* temp = pub_;
  pub_ = nullptr;
  return temp;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::_internal_mutable_pub() {
  
  if (pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::CurvePoint>(GetArena());
    pub_ = p;
  }
  return pub_;
}
inline ::safeheron::proto::CurvePoint* Round2BCMessage::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pub)
  return _internal_mutable_pub();
}
inline void Round2BCMessage::set_allocated_pub(::safeheron::proto::CurvePoint* pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_);
  }
  if (pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub)->GetArena();
    if (message_arena != submessage_arena) {
      pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub, submessage_arena);
    }
    
  } else {
    
  }
  pub_ = pub;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pub)
}

// .safeheron.proto.DLogProof dlog_proof_x = 2;
inline bool Round2BCMessage::_internal_has_dlog_proof_x() const {
  return this != internal_default_instance() && dlog_proof_x_ != nullptr;
}
inline bool Round2BCMessage::has_dlog_proof_x() const {
  return _internal_has_dlog_proof_x();
}
inline const ::safeheron::proto::DLogProof& Round2BCMessage::_internal_dlog_proof_x() const {
  const ::safeheron::proto::DLogProof* p = dlog_proof_x_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::DLogProof&>(
      ::safeheron::proto::_DLogProof_default_instance_);
}
inline const ::safeheron::proto::DLogProof& Round2BCMessage::dlog_proof_x() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.dlog_proof_x)
  return _internal_dlog_proof_x();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_dlog_proof_x(
    ::safeheron::proto::DLogProof* dlog_proof_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x_);
  }
  dlog_proof_x_ = dlog_proof_x;
  if (dlog_proof_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.dlog_proof_x)
}
inline ::safeheron::proto::DLogProof* Round2BCMessage::release_dlog_proof_x() {
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_x_;
  dlog_proof_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::DLogProof* Round2BCMessage::unsafe_arena_release_dlog_proof_x() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.dlog_proof_x)
  
  ::safeheron::proto::DLogProof* temp = dlog_proof_x_;
  dlog_proof_x_ = nullptr;
  return temp;
}
inline ::safeheron::proto::DLogProof* Round2BCMessage::_internal_mutable_dlog_proof_x() {
  
  if (dlog_proof_x_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::DLogProof>(GetArena());
    dlog_proof_x_ = p;
  }
  return dlog_proof_x_;
}
inline ::safeheron::proto::DLogProof* Round2BCMessage::mutable_dlog_proof_x() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.dlog_proof_x)
  return _internal_mutable_dlog_proof_x();
}
inline void Round2BCMessage::set_allocated_dlog_proof_x(::safeheron::proto::DLogProof* dlog_proof_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x_);
  }
  if (dlog_proof_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dlog_proof_x)->GetArena();
    if (message_arena != submessage_arena) {
      dlog_proof_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dlog_proof_x, submessage_arena);
    }
    
  } else {
    
  }
  dlog_proof_x_ = dlog_proof_x;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.dlog_proof_x)
}

// .safeheron.proto.PailBlumModulusProof pail_proof = 3;
inline bool Round2BCMessage::_internal_has_pail_proof() const {
  return this != internal_default_instance() && pail_proof_ != nullptr;
}
inline bool Round2BCMessage::has_pail_proof() const {
  return _internal_has_pail_proof();
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2BCMessage::_internal_pail_proof() const {
  const ::safeheron::proto::PailBlumModulusProof* p = pail_proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::safeheron::proto::PailBlumModulusProof&>(
      ::safeheron::proto::_PailBlumModulusProof_default_instance_);
}
inline const ::safeheron::proto::PailBlumModulusProof& Round2BCMessage::pail_proof() const {
  // @@protoc_insertion_point(field_get:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pail_proof)
  return _internal_pail_proof();
}
inline void Round2BCMessage::unsafe_arena_set_allocated_pail_proof(
    ::safeheron::proto::PailBlumModulusProof* pail_proof) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof_);
  }
  pail_proof_ = pail_proof;
  if (pail_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pail_proof)
}
inline ::safeheron::proto::PailBlumModulusProof* Round2BCMessage::release_pail_proof() {
  
  ::safeheron::proto::PailBlumModulusProof* temp = pail_proof_;
  pail_proof_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2BCMessage::unsafe_arena_release_pail_proof() {
  // @@protoc_insertion_point(field_release:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pail_proof)
  
  ::safeheron::proto::PailBlumModulusProof* temp = pail_proof_;
  pail_proof_ = nullptr;
  return temp;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2BCMessage::_internal_mutable_pail_proof() {
  
  if (pail_proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::safeheron::proto::PailBlumModulusProof>(GetArena());
    pail_proof_ = p;
  }
  return pail_proof_;
}
inline ::safeheron::proto::PailBlumModulusProof* Round2BCMessage::mutable_pail_proof() {
  // @@protoc_insertion_point(field_mutable:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pail_proof)
  return _internal_mutable_pail_proof();
}
inline void Round2BCMessage::set_allocated_pail_proof(::safeheron::proto::PailBlumModulusProof* pail_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof_);
  }
  if (pail_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pail_proof)->GetArena();
    if (message_arena != submessage_arena) {
      pail_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pail_proof, submessage_arena);
    }
    
  } else {
    
  }
  pail_proof_ = pail_proof;
  // @@protoc_insertion_point(field_set_allocated:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage.pail_proof)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace key_gen
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gg18_2fkey_5fgen_2eproto
