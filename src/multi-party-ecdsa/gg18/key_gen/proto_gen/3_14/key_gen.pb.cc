// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gg18/key_gen.proto

#include "key_gen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_curve_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurvePoint_curve_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DLNProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DLogProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_commitment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KGD_commitment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoSmallFactorProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailBlumModulusProof_zkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_paillier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PailPub_paillier_2eproto;
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_gen {
class Round0BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round0BCMessage> _instance;
} _Round0BCMessage_default_instance_;
class Round1BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round1BCMessage> _instance;
} _Round1BCMessage_default_instance_;
class Round1P2PMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round1P2PMessage> _instance;
} _Round1P2PMessage_default_instance_;
class Round2BCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Round2BCMessage> _instance;
} _Round2BCMessage_default_instance_;
}  // namespace key_gen
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
static void InitDefaultsscc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round0BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto}, {
      &scc_info_PailPub_paillier_2eproto.base,
      &scc_info_DLNProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round1BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto}, {
      &scc_info_KGD_commitment_2eproto.base,
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round1P2PMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto}, {
      &scc_info_NoSmallFactorProof_zkp_2eproto.base,}};

static void InitDefaultsscc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round2BCMessage_default_instance_;
    new (ptr) ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto}, {
      &scc_info_CurvePoint_curve_5fpoint_2eproto.base,
      &scc_info_DLogProof_zkp_2eproto.base,
      &scc_info_PailBlumModulusProof_zkp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gg18_2fkey_5fgen_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gg18_2fkey_5fgen_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gg18_2fkey_5fgen_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gg18_2fkey_5fgen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, kgc_y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, pail_pub_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, dln_proof1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, dln_proof2_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, n_tilde_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, h1_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage, h2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage, kgd_y_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage, vs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage, x_ij_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage, nsf_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage, pub_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage, dlog_proof_x_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage, pail_proof_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage)},
  { 13, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage)},
  { 20, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage)},
  { 27, -1, sizeof(::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round0BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round1BCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round1P2PMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::safeheron::proto::multi_party_ecdsa::gg18::key_gen::_Round2BCMessage_default_instance_),
};

const char descriptor_table_protodef_gg18_2fkey_5fgen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022gg18/key_gen.proto\022.safeheron.proto.mu"
  "lti_party_ecdsa.gg18.key_gen\032\020commitment"
  ".proto\032\021curve_point.proto\032\016paillier.prot"
  "o\032\tzkp.proto\"\342\001\n\017Round0BCMessage\022\r\n\005inde"
  "x\030\001 \001(\t\022\r\n\005kgc_Y\030\003 \001(\t\022*\n\010pail_pub\030\004 \001(\013"
  "2\030.safeheron.proto.PailPub\022-\n\ndln_proof1"
  "\030\005 \001(\0132\031.safeheron.proto.DLNProof\022-\n\ndln"
  "_proof2\030\006 \001(\0132\031.safeheron.proto.DLNProof"
  "\022\017\n\007N_tilde\030\007 \001(\t\022\n\n\002h1\030\010 \001(\t\022\n\n\002h2\030\t \001("
  "\t\"_\n\017Round1BCMessage\022#\n\005kgd_y\030\002 \001(\0132\024.sa"
  "feheron.proto.KGD\022\'\n\002vs\030\004 \003(\0132\033.safehero"
  "n.proto.CurvePoint\"X\n\020Round1P2PMessage\022\014"
  "\n\004x_ij\030\003 \001(\t\0226\n\tnsf_proof\030\004 \001(\0132#.safehe"
  "ron.proto.NoSmallFactorProof\"\250\001\n\017Round2B"
  "CMessage\022(\n\003pub\030\001 \001(\0132\033.safeheron.proto."
  "CurvePoint\0220\n\014dlog_proof_x\030\002 \001(\0132\032.safeh"
  "eron.proto.DLogProof\0229\n\npail_proof\030\003 \001(\013"
  "2%.safeheron.proto.PailBlumModulusProofb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gg18_2fkey_5fgen_2eproto_deps[4] = {
  &::descriptor_table_commitment_2eproto,
  &::descriptor_table_curve_5fpoint_2eproto,
  &::descriptor_table_paillier_2eproto,
  &::descriptor_table_zkp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gg18_2fkey_5fgen_2eproto_sccs[4] = {
  &scc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto.base,
  &scc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto.base,
  &scc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto.base,
  &scc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gg18_2fkey_5fgen_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gg18_2fkey_5fgen_2eproto = {
  false, false, descriptor_table_protodef_gg18_2fkey_5fgen_2eproto, "gg18/key_gen.proto", 727,
  &descriptor_table_gg18_2fkey_5fgen_2eproto_once, descriptor_table_gg18_2fkey_5fgen_2eproto_sccs, descriptor_table_gg18_2fkey_5fgen_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_gg18_2fkey_5fgen_2eproto::offsets,
  file_level_metadata_gg18_2fkey_5fgen_2eproto, 4, file_level_enum_descriptors_gg18_2fkey_5fgen_2eproto, file_level_service_descriptors_gg18_2fkey_5fgen_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gg18_2fkey_5fgen_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gg18_2fkey_5fgen_2eproto)), true);
namespace safeheron {
namespace proto {
namespace multi_party_ecdsa {
namespace gg18 {
namespace key_gen {

// ===================================================================

class Round0BCMessage::_Internal {
 public:
  static const ::safeheron::proto::PailPub& pail_pub(const Round0BCMessage* msg);
  static const ::safeheron::proto::DLNProof& dln_proof1(const Round0BCMessage* msg);
  static const ::safeheron::proto::DLNProof& dln_proof2(const Round0BCMessage* msg);
};

const ::safeheron::proto::PailPub&
Round0BCMessage::_Internal::pail_pub(const Round0BCMessage* msg) {
  return *msg->pail_pub_;
}
const ::safeheron::proto::DLNProof&
Round0BCMessage::_Internal::dln_proof1(const Round0BCMessage* msg) {
  return *msg->dln_proof1_;
}
const ::safeheron::proto::DLNProof&
Round0BCMessage::_Internal::dln_proof2(const Round0BCMessage* msg) {
  return *msg->dln_proof2_;
}
void Round0BCMessage::clear_pail_pub() {
  if (GetArena() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
}
void Round0BCMessage::clear_dln_proof1() {
  if (GetArena() == nullptr && dln_proof1_ != nullptr) {
    delete dln_proof1_;
  }
  dln_proof1_ = nullptr;
}
void Round0BCMessage::clear_dln_proof2() {
  if (GetArena() == nullptr && dln_proof2_ != nullptr) {
    delete dln_proof2_;
  }
  dln_proof2_ = nullptr;
}
Round0BCMessage::Round0BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
}
Round0BCMessage::Round0BCMessage(const Round0BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArena());
  }
  kgc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kgc_y().empty()) {
    kgc_y_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kgc_y(), 
      GetArena());
  }
  n_tilde_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_n_tilde().empty()) {
    n_tilde_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_n_tilde(), 
      GetArena());
  }
  h1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_h1().empty()) {
    h1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_h1(), 
      GetArena());
  }
  h2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_h2().empty()) {
    h2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_h2(), 
      GetArena());
  }
  if (from._internal_has_pail_pub()) {
    pail_pub_ = new ::safeheron::proto::PailPub(*from.pail_pub_);
  } else {
    pail_pub_ = nullptr;
  }
  if (from._internal_has_dln_proof1()) {
    dln_proof1_ = new ::safeheron::proto::DLNProof(*from.dln_proof1_);
  } else {
    dln_proof1_ = nullptr;
  }
  if (from._internal_has_dln_proof2()) {
    dln_proof2_ = new ::safeheron::proto::DLNProof(*from.dln_proof2_);
  } else {
    dln_proof2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
}

void Round0BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto.base);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kgc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_tilde_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pail_pub_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dln_proof2_) -
      reinterpret_cast<char*>(&pail_pub_)) + sizeof(dln_proof2_));
}

Round0BCMessage::~Round0BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round0BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kgc_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_tilde_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pail_pub_;
  if (this != internal_default_instance()) delete dln_proof1_;
  if (this != internal_default_instance()) delete dln_proof2_;
}

void Round0BCMessage::ArenaDtor(void* object) {
  Round0BCMessage* _this = reinterpret_cast< Round0BCMessage* >(object);
  (void)_this;
}
void Round0BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round0BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round0BCMessage& Round0BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round0BCMessage_gg18_2fkey_5fgen_2eproto.base);
  return *internal_default_instance();
}


void Round0BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.ClearToEmpty();
  kgc_y_.ClearToEmpty();
  n_tilde_.ClearToEmpty();
  h1_.ClearToEmpty();
  h2_.ClearToEmpty();
  if (GetArena() == nullptr && pail_pub_ != nullptr) {
    delete pail_pub_;
  }
  pail_pub_ = nullptr;
  if (GetArena() == nullptr && dln_proof1_ != nullptr) {
    delete dln_proof1_;
  }
  dln_proof1_ = nullptr;
  if (GetArena() == nullptr && dln_proof2_ != nullptr) {
    delete dln_proof2_;
  }
  dln_proof2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round0BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kgc_Y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kgc_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailPub pail_pub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.DLNProof dln_proof1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dln_proof1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.DLNProof dln_proof2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dln_proof2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string N_tilde = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_n_tilde();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_h1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_h2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round0BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // string kgc_Y = 3;
  if (this->kgc_y().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kgc_y().data(), static_cast<int>(this->_internal_kgc_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.kgc_Y");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_kgc_y(), target);
  }

  // .safeheron.proto.PailPub pail_pub = 4;
  if (this->has_pail_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pail_pub(this), target, stream);
  }

  // .safeheron.proto.DLNProof dln_proof1 = 5;
  if (this->has_dln_proof1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dln_proof1(this), target, stream);
  }

  // .safeheron.proto.DLNProof dln_proof2 = 6;
  if (this->has_dln_proof2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dln_proof2(this), target, stream);
  }

  // string N_tilde = 7;
  if (this->n_tilde().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n_tilde().data(), static_cast<int>(this->_internal_n_tilde().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.N_tilde");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_n_tilde(), target);
  }

  // string h1 = 8;
  if (this->h1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h1().data(), static_cast<int>(this->_internal_h1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_h1(), target);
  }

  // string h2 = 9;
  if (this->h2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h2().data(), static_cast<int>(this->_internal_h2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage.h2");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_h2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  return target;
}

size_t Round0BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index = 1;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // string kgc_Y = 3;
  if (this->kgc_y().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kgc_y());
  }

  // string N_tilde = 7;
  if (this->n_tilde().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n_tilde());
  }

  // string h1 = 8;
  if (this->h1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h1());
  }

  // string h2 = 9;
  if (this->h2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h2());
  }

  // .safeheron.proto.PailPub pail_pub = 4;
  if (this->has_pail_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_pub_);
  }

  // .safeheron.proto.DLNProof dln_proof1 = 5;
  if (this->has_dln_proof1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dln_proof1_);
  }

  // .safeheron.proto.DLNProof dln_proof2 = 6;
  if (this->has_dln_proof2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dln_proof2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round0BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round0BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round0BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
    MergeFrom(*source);
  }
}

void Round0BCMessage::MergeFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index().size() > 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.kgc_y().size() > 0) {
    _internal_set_kgc_y(from._internal_kgc_y());
  }
  if (from.n_tilde().size() > 0) {
    _internal_set_n_tilde(from._internal_n_tilde());
  }
  if (from.h1().size() > 0) {
    _internal_set_h1(from._internal_h1());
  }
  if (from.h2().size() > 0) {
    _internal_set_h2(from._internal_h2());
  }
  if (from.has_pail_pub()) {
    _internal_mutable_pail_pub()->::safeheron::proto::PailPub::MergeFrom(from._internal_pail_pub());
  }
  if (from.has_dln_proof1()) {
    _internal_mutable_dln_proof1()->::safeheron::proto::DLNProof::MergeFrom(from._internal_dln_proof1());
  }
  if (from.has_dln_proof2()) {
    _internal_mutable_dln_proof2()->::safeheron::proto::DLNProof::MergeFrom(from._internal_dln_proof2());
  }
}

void Round0BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round0BCMessage::CopyFrom(const Round0BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round0BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round0BCMessage::IsInitialized() const {
  return true;
}

void Round0BCMessage::InternalSwap(Round0BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kgc_y_.Swap(&other->kgc_y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  n_tilde_.Swap(&other->n_tilde_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  h1_.Swap(&other->h1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  h2_.Swap(&other->h2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round0BCMessage, dln_proof2_)
      + sizeof(Round0BCMessage::dln_proof2_)
      - PROTOBUF_FIELD_OFFSET(Round0BCMessage, pail_pub_)>(
          reinterpret_cast<char*>(&pail_pub_),
          reinterpret_cast<char*>(&other->pail_pub_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round0BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round1BCMessage::_Internal {
 public:
  static const ::safeheron::proto::KGD& kgd_y(const Round1BCMessage* msg);
};

const ::safeheron::proto::KGD&
Round1BCMessage::_Internal::kgd_y(const Round1BCMessage* msg) {
  return *msg->kgd_y_;
}
void Round1BCMessage::clear_kgd_y() {
  if (GetArena() == nullptr && kgd_y_ != nullptr) {
    delete kgd_y_;
  }
  kgd_y_ = nullptr;
}
void Round1BCMessage::clear_vs() {
  vs_.Clear();
}
Round1BCMessage::Round1BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
}
Round1BCMessage::Round1BCMessage(const Round1BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vs_(from.vs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kgd_y()) {
    kgd_y_ = new ::safeheron::proto::KGD(*from.kgd_y_);
  } else {
    kgd_y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
}

void Round1BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto.base);
  kgd_y_ = nullptr;
}

Round1BCMessage::~Round1BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round1BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete kgd_y_;
}

void Round1BCMessage::ArenaDtor(void* object) {
  Round1BCMessage* _this = reinterpret_cast< Round1BCMessage* >(object);
  (void)_this;
}
void Round1BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round1BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round1BCMessage& Round1BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round1BCMessage_gg18_2fkey_5fgen_2eproto.base);
  return *internal_default_instance();
}


void Round1BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vs_.Clear();
  if (GetArena() == nullptr && kgd_y_ != nullptr) {
    delete kgd_y_;
  }
  kgd_y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.KGD kgd_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kgd_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safeheron.proto.CurvePoint vs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round1BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.KGD kgd_y = 2;
  if (this->has_kgd_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::kgd_y(this), target, stream);
  }

  // repeated .safeheron.proto.CurvePoint vs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  return target;
}

size_t Round1BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safeheron.proto.CurvePoint vs = 4;
  total_size += 1UL * this->_internal_vs_size();
  for (const auto& msg : this->vs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .safeheron.proto.KGD kgd_y = 2;
  if (this->has_kgd_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kgd_y_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round1BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round1BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round1BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
    MergeFrom(*source);
  }
}

void Round1BCMessage::MergeFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vs_.MergeFrom(from.vs_);
  if (from.has_kgd_y()) {
    _internal_mutable_kgd_y()->::safeheron::proto::KGD::MergeFrom(from._internal_kgd_y());
  }
}

void Round1BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round1BCMessage::CopyFrom(const Round1BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1BCMessage::IsInitialized() const {
  return true;
}

void Round1BCMessage::InternalSwap(Round1BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vs_.InternalSwap(&other->vs_);
  swap(kgd_y_, other->kgd_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round1P2PMessage::_Internal {
 public:
  static const ::safeheron::proto::NoSmallFactorProof& nsf_proof(const Round1P2PMessage* msg);
};

const ::safeheron::proto::NoSmallFactorProof&
Round1P2PMessage::_Internal::nsf_proof(const Round1P2PMessage* msg) {
  return *msg->nsf_proof_;
}
void Round1P2PMessage::clear_nsf_proof() {
  if (GetArena() == nullptr && nsf_proof_ != nullptr) {
    delete nsf_proof_;
  }
  nsf_proof_ = nullptr;
}
Round1P2PMessage::Round1P2PMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
}
Round1P2PMessage::Round1P2PMessage(const Round1P2PMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_ij().empty()) {
    x_ij_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_ij(), 
      GetArena());
  }
  if (from._internal_has_nsf_proof()) {
    nsf_proof_ = new ::safeheron::proto::NoSmallFactorProof(*from.nsf_proof_);
  } else {
    nsf_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
}

void Round1P2PMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto.base);
  x_ij_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nsf_proof_ = nullptr;
}

Round1P2PMessage::~Round1P2PMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round1P2PMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  x_ij_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nsf_proof_;
}

void Round1P2PMessage::ArenaDtor(void* object) {
  Round1P2PMessage* _this = reinterpret_cast< Round1P2PMessage* >(object);
  (void)_this;
}
void Round1P2PMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round1P2PMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round1P2PMessage& Round1P2PMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round1P2PMessage_gg18_2fkey_5fgen_2eproto.base);
  return *internal_default_instance();
}


void Round1P2PMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_ij_.ClearToEmpty();
  if (GetArena() == nullptr && nsf_proof_ != nullptr) {
    delete nsf_proof_;
  }
  nsf_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round1P2PMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string x_ij = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_x_ij();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.NoSmallFactorProof nsf_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nsf_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round1P2PMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string x_ij = 3;
  if (this->x_ij().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_ij().data(), static_cast<int>(this->_internal_x_ij().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage.x_ij");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_x_ij(), target);
  }

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 4;
  if (this->has_nsf_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nsf_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  return target;
}

size_t Round1P2PMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string x_ij = 3;
  if (this->x_ij().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_ij());
  }

  // .safeheron.proto.NoSmallFactorProof nsf_proof = 4;
  if (this->has_nsf_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nsf_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round1P2PMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round1P2PMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round1P2PMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
    MergeFrom(*source);
  }
}

void Round1P2PMessage::MergeFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_ij().size() > 0) {
    _internal_set_x_ij(from._internal_x_ij());
  }
  if (from.has_nsf_proof()) {
    _internal_mutable_nsf_proof()->::safeheron::proto::NoSmallFactorProof::MergeFrom(from._internal_nsf_proof());
  }
}

void Round1P2PMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round1P2PMessage::CopyFrom(const Round1P2PMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round1P2PMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round1P2PMessage::IsInitialized() const {
  return true;
}

void Round1P2PMessage::InternalSwap(Round1P2PMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  x_ij_.Swap(&other->x_ij_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nsf_proof_, other->nsf_proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Round1P2PMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Round2BCMessage::_Internal {
 public:
  static const ::safeheron::proto::CurvePoint& pub(const Round2BCMessage* msg);
  static const ::safeheron::proto::DLogProof& dlog_proof_x(const Round2BCMessage* msg);
  static const ::safeheron::proto::PailBlumModulusProof& pail_proof(const Round2BCMessage* msg);
};

const ::safeheron::proto::CurvePoint&
Round2BCMessage::_Internal::pub(const Round2BCMessage* msg) {
  return *msg->pub_;
}
const ::safeheron::proto::DLogProof&
Round2BCMessage::_Internal::dlog_proof_x(const Round2BCMessage* msg) {
  return *msg->dlog_proof_x_;
}
const ::safeheron::proto::PailBlumModulusProof&
Round2BCMessage::_Internal::pail_proof(const Round2BCMessage* msg) {
  return *msg->pail_proof_;
}
void Round2BCMessage::clear_pub() {
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
}
void Round2BCMessage::clear_dlog_proof_x() {
  if (GetArena() == nullptr && dlog_proof_x_ != nullptr) {
    delete dlog_proof_x_;
  }
  dlog_proof_x_ = nullptr;
}
void Round2BCMessage::clear_pail_proof() {
  if (GetArena() == nullptr && pail_proof_ != nullptr) {
    delete pail_proof_;
  }
  pail_proof_ = nullptr;
}
Round2BCMessage::Round2BCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
}
Round2BCMessage::Round2BCMessage(const Round2BCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub()) {
    pub_ = new ::safeheron::proto::CurvePoint(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from._internal_has_dlog_proof_x()) {
    dlog_proof_x_ = new ::safeheron::proto::DLogProof(*from.dlog_proof_x_);
  } else {
    dlog_proof_x_ = nullptr;
  }
  if (from._internal_has_pail_proof()) {
    pail_proof_ = new ::safeheron::proto::PailBlumModulusProof(*from.pail_proof_);
  } else {
    pail_proof_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
}

void Round2BCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pub_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pail_proof_) -
      reinterpret_cast<char*>(&pub_)) + sizeof(pail_proof_));
}

Round2BCMessage::~Round2BCMessage() {
  // @@protoc_insertion_point(destructor:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Round2BCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete dlog_proof_x_;
  if (this != internal_default_instance()) delete pail_proof_;
}

void Round2BCMessage::ArenaDtor(void* object) {
  Round2BCMessage* _this = reinterpret_cast< Round2BCMessage* >(object);
  (void)_this;
}
void Round2BCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Round2BCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Round2BCMessage& Round2BCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Round2BCMessage_gg18_2fkey_5fgen_2eproto.base);
  return *internal_default_instance();
}


void Round2BCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArena() == nullptr && dlog_proof_x_ != nullptr) {
    delete dlog_proof_x_;
  }
  dlog_proof_x_ = nullptr;
  if (GetArena() == nullptr && pail_proof_ != nullptr) {
    delete pail_proof_;
  }
  pail_proof_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Round2BCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .safeheron.proto.CurvePoint pub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.DLogProof dlog_proof_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dlog_proof_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .safeheron.proto.PailBlumModulusProof pail_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pail_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Round2BCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint pub = 1;
  if (this->has_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pub(this), target, stream);
  }

  // .safeheron.proto.DLogProof dlog_proof_x = 2;
  if (this->has_dlog_proof_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dlog_proof_x(this), target, stream);
  }

  // .safeheron.proto.PailBlumModulusProof pail_proof = 3;
  if (this->has_pail_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pail_proof(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  return target;
}

size_t Round2BCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .safeheron.proto.CurvePoint pub = 1;
  if (this->has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .safeheron.proto.DLogProof dlog_proof_x = 2;
  if (this->has_dlog_proof_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dlog_proof_x_);
  }

  // .safeheron.proto.PailBlumModulusProof pail_proof = 3;
  if (this->has_pail_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pail_proof_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Round2BCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Round2BCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Round2BCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
    MergeFrom(*source);
  }
}

void Round2BCMessage::MergeFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pub()) {
    _internal_mutable_pub()->::safeheron::proto::CurvePoint::MergeFrom(from._internal_pub());
  }
  if (from.has_dlog_proof_x()) {
    _internal_mutable_dlog_proof_x()->::safeheron::proto::DLogProof::MergeFrom(from._internal_dlog_proof_x());
  }
  if (from.has_pail_proof()) {
    _internal_mutable_pail_proof()->::safeheron::proto::PailBlumModulusProof::MergeFrom(from._internal_pail_proof());
  }
}

void Round2BCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2BCMessage::CopyFrom(const Round2BCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.multi_party_ecdsa.gg18.key_gen.Round2BCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2BCMessage::IsInitialized() const {
  return true;
}

void Round2BCMessage::InternalSwap(Round2BCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Round2BCMessage, pail_proof_)
      + sizeof(Round2BCMessage::pail_proof_)
      - PROTOBUF_FIELD_OFFSET(Round2BCMessage, pub_)>(
          reinterpret_cast<char*>(&pub_),
          reinterpret_cast<char*>(&other->pub_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Round2BCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace key_gen
}  // namespace gg18
}  // namespace multi_party_ecdsa
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round0BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1BCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round1P2PMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage* Arena::CreateMaybeMessage< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::multi_party_ecdsa::gg18::key_gen::Round2BCMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
